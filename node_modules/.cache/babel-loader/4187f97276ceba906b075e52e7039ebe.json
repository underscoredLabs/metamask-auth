{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\n\nconst ethjs_util_1 = require(\"ethjs-util\");\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\n\n\nexports.assertIsHexString = function (input) {\n  if (!ethjs_util_1.isHexString(input)) {\n    const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;\n    throw new Error(msg);\n  }\n};\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\n\n\nexports.assertIsBuffer = function (input) {\n  if (!Buffer.isBuffer(input)) {\n    const msg = `This method only supports Buffer but input was: ${input}`;\n    throw new Error(msg);\n  }\n};\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\n\n\nexports.assertIsArray = function (input) {\n  if (!Array.isArray(input)) {\n    const msg = `This method only supports number arrays but input was: ${input}`;\n    throw new Error(msg);\n  }\n};\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\n\n\nexports.assertIsString = function (input) {\n  if (typeof input !== 'string') {\n    const msg = `This method only supports strings but input was: ${input}`;\n    throw new Error(msg);\n  }\n};","map":{"version":3,"sources":["../src/helpers.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,YAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;;;AAGG;;;AACU,OAAA,CAAA,iBAAA,GAAoB,UAAS,KAAT,EAAsB;AACrD,MAAI,CAAC,YAAA,CAAA,WAAA,CAAY,KAAZ,CAAL,EAAyB;AACvB,UAAM,GAAG,GAAG,oEAAoE,KAAK,EAArF;AACA,UAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACD;AACF,CALY;AAOb;;;AAGG;;;AACU,OAAA,CAAA,cAAA,GAAiB,UAAS,KAAT,EAAsB;AAClD,MAAI,CAAC,MAAM,CAAC,QAAP,CAAgB,KAAhB,CAAL,EAA6B;AAC3B,UAAM,GAAG,GAAG,mDAAmD,KAAK,EAApE;AACA,UAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACD;AACF,CALY;AAOb;;;AAGG;;;AACU,OAAA,CAAA,aAAA,GAAgB,UAAS,KAAT,EAAwB;AACnD,MAAI,CAAC,KAAK,CAAC,OAAN,CAAc,KAAd,CAAL,EAA2B;AACzB,UAAM,GAAG,GAAG,0DAA0D,KAAK,EAA3E;AACA,UAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACD;AACF,CALY;AAOb;;;AAGG;;;AACU,OAAA,CAAA,cAAA,GAAiB,UAAS,KAAT,EAAsB;AAClD,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAM,GAAG,GAAG,oDAAoD,KAAK,EAArE;AACA,UAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACD;AACF,CALY","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\nconst ethjs_util_1 = require(\"ethjs-util\");\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nexports.assertIsHexString = function (input) {\n    if (!ethjs_util_1.isHexString(input)) {\n        const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nexports.assertIsBuffer = function (input) {\n    if (!Buffer.isBuffer(input)) {\n        const msg = `This method only supports Buffer but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nexports.assertIsArray = function (input) {\n    if (!Array.isArray(input)) {\n        const msg = `This method only supports number arrays but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nexports.assertIsString = function (input) {\n    if (typeof input !== 'string') {\n        const msg = `This method only supports strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n//# sourceMappingURL=helpers.js.map"]},"metadata":{},"sourceType":"script"}