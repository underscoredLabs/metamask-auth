{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defineProperties = void 0;\n\nconst assert_1 = __importDefault(require(\"assert\"));\n\nconst ethjsUtil = __importStar(require(\"ethjs-util\"));\n\nconst rlp = __importStar(require(\"rlp\"));\n\nconst bytes_1 = require(\"./bytes\");\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @param self the `Object` to define properties on\n * @param fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param data data to be validated against the definitions\n * @deprecated\n */\n\n\nexports.defineProperties = function (self, fields, data) {\n  self.raw = [];\n  self._fields = []; // attach the `toJSON`\n\n  self.toJSON = function (label = false) {\n    if (label) {\n      const obj = {};\n\n      self._fields.forEach(field => {\n        obj[field] = `0x${self[field].toString('hex')}`;\n      });\n\n      return obj;\n    }\n\n    return bytes_1.baToJSON(self.raw);\n  };\n\n  self.serialize = function serialize() {\n    return rlp.encode(self.raw);\n  };\n\n  fields.forEach((field, i) => {\n    self._fields.push(field.name);\n\n    function getter() {\n      return self.raw[i];\n    }\n\n    function setter(v) {\n      v = bytes_1.toBuffer(v);\n\n      if (v.toString('hex') === '00' && !field.allowZero) {\n        v = Buffer.allocUnsafe(0);\n      }\n\n      if (field.allowLess && field.length) {\n        v = bytes_1.unpadBuffer(v);\n        assert_1.default(field.length >= v.length, `The field ${field.name} must not have more ${field.length} bytes`);\n      } else if (!(field.allowZero && v.length === 0) && field.length) {\n        assert_1.default(field.length === v.length, `The field ${field.name} must have byte length of ${field.length}`);\n      }\n\n      self.raw[i] = v;\n    }\n\n    Object.defineProperty(self, field.name, {\n      enumerable: true,\n      configurable: true,\n      get: getter,\n      set: setter\n    });\n\n    if (field.default) {\n      self[field.name] = field.default;\n    } // attach alias\n\n\n    if (field.alias) {\n      Object.defineProperty(self, field.alias, {\n        enumerable: false,\n        configurable: true,\n        set: setter,\n        get: getter\n      });\n    }\n  }); // if the constuctor is passed data\n\n  if (data) {\n    if (typeof data === 'string') {\n      data = Buffer.from(ethjsUtil.stripHexPrefix(data), 'hex');\n    }\n\n    if (Buffer.isBuffer(data)) {\n      data = rlp.decode(data);\n    }\n\n    if (Array.isArray(data)) {\n      if (data.length > self._fields.length) {\n        throw new Error('wrong number of fields in data');\n      } // make sure all the items are buffers\n\n\n      data.forEach((d, i) => {\n        self[self._fields[i]] = bytes_1.toBuffer(d);\n      });\n    } else if (typeof data === 'object') {\n      const keys = Object.keys(data);\n      fields.forEach(field => {\n        if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name];\n        if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];\n      });\n    } else {\n      throw new Error('invalid data');\n    }\n  }\n};","map":{"version":3,"sources":["../src/object.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defineProperties = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst ethjsUtil = __importStar(require(\"ethjs-util\"));\nconst rlp = __importStar(require(\"rlp\"));\nconst bytes_1 = require(\"./bytes\");\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @param self the `Object` to define properties on\n * @param fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param data data to be validated against the definitions\n * @deprecated\n */\nexports.defineProperties = function (self, fields, data) {\n    self.raw = [];\n    self._fields = [];\n    // attach the `toJSON`\n    self.toJSON = function (label = false) {\n        if (label) {\n            const obj = {};\n            self._fields.forEach((field) => {\n                obj[field] = `0x${self[field].toString('hex')}`;\n            });\n            return obj;\n        }\n        return bytes_1.baToJSON(self.raw);\n    };\n    self.serialize = function serialize() {\n        return rlp.encode(self.raw);\n    };\n    fields.forEach((field, i) => {\n        self._fields.push(field.name);\n        function getter() {\n            return self.raw[i];\n        }\n        function setter(v) {\n            v = bytes_1.toBuffer(v);\n            if (v.toString('hex') === '00' && !field.allowZero) {\n                v = Buffer.allocUnsafe(0);\n            }\n            if (field.allowLess && field.length) {\n                v = bytes_1.unpadBuffer(v);\n                assert_1.default(field.length >= v.length, `The field ${field.name} must not have more ${field.length} bytes`);\n            }\n            else if (!(field.allowZero && v.length === 0) && field.length) {\n                assert_1.default(field.length === v.length, `The field ${field.name} must have byte length of ${field.length}`);\n            }\n            self.raw[i] = v;\n        }\n        Object.defineProperty(self, field.name, {\n            enumerable: true,\n            configurable: true,\n            get: getter,\n            set: setter\n        });\n        if (field.default) {\n            self[field.name] = field.default;\n        }\n        // attach alias\n        if (field.alias) {\n            Object.defineProperty(self, field.alias, {\n                enumerable: false,\n                configurable: true,\n                set: setter,\n                get: getter\n            });\n        }\n    });\n    // if the constuctor is passed data\n    if (data) {\n        if (typeof data === 'string') {\n            data = Buffer.from(ethjsUtil.stripHexPrefix(data), 'hex');\n        }\n        if (Buffer.isBuffer(data)) {\n            data = rlp.decode(data);\n        }\n        if (Array.isArray(data)) {\n            if (data.length > self._fields.length) {\n                throw new Error('wrong number of fields in data');\n            }\n            // make sure all the items are buffers\n            data.forEach((d, i) => {\n                self[self._fields[i]] = bytes_1.toBuffer(d);\n            });\n        }\n        else if (typeof data === 'object') {\n            const keys = Object.keys(data);\n            fields.forEach((field) => {\n                if (keys.indexOf(field.name) !== -1)\n                    self[field.name] = data[field.name];\n                if (keys.indexOf(field.alias) !== -1)\n                    self[field.alias] = data[field.alias];\n            });\n        }\n        else {\n            throw new Error('invalid data');\n        }\n    }\n};\n//# sourceMappingURL=object.js.map"]},"metadata":{},"sourceType":"script"}