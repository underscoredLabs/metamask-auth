{"ast":null,"code":"const assert = require('assert');\n\nconst Buffer = require('buffer/').Buffer;\n/**\n * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP\n * This function takes in a data, convert it to buffer if not, and a length for recursion\n *\n * @param {Buffer,String,Integer,Array} data - will be converted to buffer\n * @returns {Buffer} - returns buffer of encoded data\n **/\n\n\nexports.encode = function (input) {\n  if (input instanceof Array) {\n    var output = [];\n\n    for (var i = 0; i < input.length; i++) {\n      output.push(exports.encode(input[i]));\n    }\n\n    var buf = Buffer.concat(output);\n    return Buffer.concat([encodeLength(buf.length, 192), buf]);\n  } else {\n    input = toBuffer(input);\n\n    if (input.length === 1 && input[0] < 128) {\n      return input;\n    } else {\n      return Buffer.concat([encodeLength(input.length, 128), input]);\n    }\n  }\n};\n\nfunction safeParseInt(v, base) {\n  if (v.slice(0, 2) === '00') {\n    throw new Error('invalid RLP: extra zeros');\n  }\n\n  return parseInt(v, base);\n}\n\nfunction encodeLength(len, offset) {\n  if (len < 56) {\n    return new Buffer([len + offset]);\n  } else {\n    var hexLength = intToHex(len);\n    var lLength = hexLength.length / 2;\n    var firstByte = intToHex(offset + 55 + lLength);\n    return new Buffer(firstByte + hexLength, 'hex');\n  }\n}\n/**\n * RLP Decoding based on: {@link https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP|RLP}\n * @param {Buffer,String,Integer,Array} data - will be converted to buffer\n * @returns {Array} - returns decode Array of Buffers containg the original message\n **/\n\n\nexports.decode = function (input, stream) {\n  if (!input || input.length === 0) {\n    return new Buffer([]);\n  }\n\n  input = toBuffer(input);\n\n  var decoded = _decode(input);\n\n  if (stream) {\n    return decoded;\n  }\n\n  assert.equal(decoded.remainder.length, 0, 'invalid remainder');\n  return decoded.data;\n};\n\nexports.getLength = function (input) {\n  if (!input || input.length === 0) {\n    return new Buffer([]);\n  }\n\n  input = toBuffer(input);\n  var firstByte = input[0];\n\n  if (firstByte <= 0x7f) {\n    return input.length;\n  } else if (firstByte <= 0xb7) {\n    return firstByte - 0x7f;\n  } else if (firstByte <= 0xbf) {\n    return firstByte - 0xb6;\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    return firstByte - 0xbf;\n  } else {\n    // a list  over 55 bytes long\n    var llength = firstByte - 0xf6;\n    var length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n    return llength + length;\n  }\n};\n\nfunction _decode(input) {\n  var length, llength, data, innerRemainder, d;\n  var decoded = [];\n  var firstByte = input[0];\n\n  if (firstByte <= 0x7f) {\n    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n    return {\n      data: input.slice(0, 1),\n      remainder: input.slice(1)\n    };\n  } else if (firstByte <= 0xb7) {\n    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n    // The range of the first byte is [0x80, 0xb7]\n    length = firstByte - 0x7f; // set 0x80 null to 0\n\n    if (firstByte === 0x80) {\n      data = new Buffer([]);\n    } else {\n      data = input.slice(1, length);\n    }\n\n    if (length === 2 && data[0] < 0x80) {\n      throw new Error('invalid rlp encoding: byte must be less 0x80');\n    }\n\n    return {\n      data: data,\n      remainder: input.slice(length)\n    };\n  } else if (firstByte <= 0xbf) {\n    llength = firstByte - 0xb6;\n    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n    data = input.slice(llength, length + llength);\n\n    if (data.length < length) {\n      throw new Error('invalid RLP');\n    }\n\n    return {\n      data: data,\n      remainder: input.slice(length + llength)\n    };\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    length = firstByte - 0xbf;\n    innerRemainder = input.slice(1, length);\n\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n\n    return {\n      data: decoded,\n      remainder: input.slice(length)\n    };\n  } else {\n    // a list  over 55 bytes long\n    llength = firstByte - 0xf6;\n    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n    var totalLength = llength + length;\n\n    if (totalLength > input.length) {\n      throw new Error('invalid rlp: total length is larger than the data');\n    }\n\n    innerRemainder = input.slice(llength, totalLength);\n\n    if (innerRemainder.length === 0) {\n      throw new Error('invalid rlp, List has a invalid length');\n    }\n\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n\n    return {\n      data: decoded,\n      remainder: input.slice(totalLength)\n    };\n  }\n}\n\nfunction isHexPrefixed(str) {\n  return str.slice(0, 2) === '0x';\n} // Removes 0x from a given String\n\n\nfunction stripHexPrefix(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return isHexPrefixed(str) ? str.slice(2) : str;\n}\n\nfunction intToHex(i) {\n  var hex = i.toString(16);\n\n  if (hex.length % 2) {\n    hex = '0' + hex;\n  }\n\n  return hex;\n}\n\nfunction padToEven(a) {\n  if (a.length % 2) a = '0' + a;\n  return a;\n}\n\nfunction intToBuffer(i) {\n  var hex = intToHex(i);\n  return new Buffer(hex, 'hex');\n}\n\nfunction toBuffer(v) {\n  if (!Buffer.isBuffer(v)) {\n    if (typeof v === 'string') {\n      if (isHexPrefixed(v)) {\n        v = new Buffer(padToEven(stripHexPrefix(v)), 'hex');\n      } else {\n        v = new Buffer(v);\n      }\n    } else if (typeof v === 'number') {\n      if (!v) {\n        v = new Buffer([]);\n      } else {\n        v = intToBuffer(v);\n      }\n    } else if (v === null || v === undefined) {\n      v = new Buffer([]);\n    } else if (v.toArray) {\n      // converts a BN to a Buffer\n      v = new Buffer(v.toArray());\n    } else {\n      throw new Error('invalid type');\n    }\n  }\n\n  return v;\n}","map":{"version":3,"sources":["/Users/leondo/Desktop/metamask-auth/node_modules/rlp-browser/index.js"],"names":["assert","require","Buffer","exports","encode","input","Array","output","i","length","push","buf","concat","encodeLength","toBuffer","safeParseInt","v","base","slice","Error","parseInt","len","offset","hexLength","intToHex","lLength","firstByte","decode","stream","decoded","_decode","equal","remainder","data","getLength","llength","toString","innerRemainder","d","totalLength","isHexPrefixed","str","stripHexPrefix","hex","padToEven","a","intToBuffer","isBuffer","undefined","toArray"],"mappings":"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","sourcesContent":["const assert = require('assert')\nconst Buffer = require('buffer/').Buffer\n/**\n * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP\n * This function takes in a data, convert it to buffer if not, and a length for recursion\n *\n * @param {Buffer,String,Integer,Array} data - will be converted to buffer\n * @returns {Buffer} - returns buffer of encoded data\n **/\nexports.encode = function (input) {\n  if (input instanceof Array) {\n    var output = []\n    for (var i = 0; i < input.length; i++) {\n      output.push(exports.encode(input[i]))\n    }\n    var buf = Buffer.concat(output)\n    return Buffer.concat([encodeLength(buf.length, 192), buf])\n  } else {\n    input = toBuffer(input)\n    if (input.length === 1 && input[0] < 128) {\n      return input\n    } else {\n      return Buffer.concat([encodeLength(input.length, 128), input])\n    }\n  }\n}\n\nfunction safeParseInt (v, base) {\n  if (v.slice(0, 2) === '00') {\n    throw (new Error('invalid RLP: extra zeros'))\n  }\n\n  return parseInt(v, base)\n}\n\nfunction encodeLength (len, offset) {\n  if (len < 56) {\n    return new Buffer([len + offset])\n  } else {\n    var hexLength = intToHex(len)\n    var lLength = hexLength.length / 2\n    var firstByte = intToHex(offset + 55 + lLength)\n    return new Buffer(firstByte + hexLength, 'hex')\n  }\n}\n\n/**\n * RLP Decoding based on: {@link https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP|RLP}\n * @param {Buffer,String,Integer,Array} data - will be converted to buffer\n * @returns {Array} - returns decode Array of Buffers containg the original message\n **/\nexports.decode = function (input, stream) {\n  if (!input || input.length === 0) {\n    return new Buffer([])\n  }\n\n  input = toBuffer(input)\n  var decoded = _decode(input)\n\n  if (stream) {\n    return decoded\n  }\n\n  assert.equal(decoded.remainder.length, 0, 'invalid remainder')\n  return decoded.data\n}\n\nexports.getLength = function (input) {\n  if (!input || input.length === 0) {\n    return new Buffer([])\n  }\n\n  input = toBuffer(input)\n  var firstByte = input[0]\n  if (firstByte <= 0x7f) {\n    return input.length\n  } else if (firstByte <= 0xb7) {\n    return firstByte - 0x7f\n  } else if (firstByte <= 0xbf) {\n    return firstByte - 0xb6\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    return firstByte - 0xbf\n  } else {\n    // a list  over 55 bytes long\n    var llength = firstByte - 0xf6\n    var length = safeParseInt(input.slice(1, llength).toString('hex'), 16)\n    return llength + length\n  }\n}\n\nfunction _decode (input) {\n  var length, llength, data, innerRemainder, d\n  var decoded = []\n  var firstByte = input[0]\n\n  if (firstByte <= 0x7f) {\n    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n    return {\n      data: input.slice(0, 1),\n      remainder: input.slice(1)\n    }\n  } else if (firstByte <= 0xb7) {\n    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n    // The range of the first byte is [0x80, 0xb7]\n    length = firstByte - 0x7f\n\n    // set 0x80 null to 0\n    if (firstByte === 0x80) {\n      data = new Buffer([])\n    } else {\n      data = input.slice(1, length)\n    }\n\n    if (length === 2 && data[0] < 0x80) {\n      throw new Error('invalid rlp encoding: byte must be less 0x80')\n    }\n\n    return {\n      data: data,\n      remainder: input.slice(length)\n    }\n  } else if (firstByte <= 0xbf) {\n    llength = firstByte - 0xb6\n    length = safeParseInt(input.slice(1, llength).toString('hex'), 16)\n    data = input.slice(llength, length + llength)\n    if (data.length < length) {\n      throw (new Error('invalid RLP'))\n    }\n\n    return {\n      data: data,\n      remainder: input.slice(length + llength)\n    }\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    length = firstByte - 0xbf\n    innerRemainder = input.slice(1, length)\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder)\n      decoded.push(d.data)\n      innerRemainder = d.remainder\n    }\n\n    return {\n      data: decoded,\n      remainder: input.slice(length)\n    }\n  } else {\n    // a list  over 55 bytes long\n    llength = firstByte - 0xf6\n    length = safeParseInt(input.slice(1, llength).toString('hex'), 16)\n    var totalLength = llength + length\n    if (totalLength > input.length) {\n      throw new Error('invalid rlp: total length is larger than the data')\n    }\n\n    innerRemainder = input.slice(llength, totalLength)\n    if (innerRemainder.length === 0) {\n      throw new Error('invalid rlp, List has a invalid length')\n    }\n\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder)\n      decoded.push(d.data)\n      innerRemainder = d.remainder\n    }\n    return {\n      data: decoded,\n      remainder: input.slice(totalLength)\n    }\n  }\n}\n\nfunction isHexPrefixed (str) {\n  return str.slice(0, 2) === '0x'\n}\n\n// Removes 0x from a given String\nfunction stripHexPrefix (str) {\n  if (typeof str !== 'string') {\n    return str\n  }\n  return isHexPrefixed(str) ? str.slice(2) : str\n}\n\nfunction intToHex (i) {\n  var hex = i.toString(16)\n  if (hex.length % 2) {\n    hex = '0' + hex\n  }\n\n  return hex\n}\n\nfunction padToEven (a) {\n  if (a.length % 2) a = '0' + a\n  return a\n}\n\nfunction intToBuffer (i) {\n  var hex = intToHex(i)\n  return new Buffer(hex, 'hex')\n}\n\nfunction toBuffer (v) {\n  if (!Buffer.isBuffer(v)) {\n    if (typeof v === 'string') {\n      if (isHexPrefixed(v)) {\n        v = new Buffer(padToEven(stripHexPrefix(v)), 'hex')\n      } else {\n        v = new Buffer(v)\n      }\n    } else if (typeof v === 'number') {\n      if (!v) {\n        v = new Buffer([])\n      } else {\n        v = intToBuffer(v)\n      }\n    } else if (v === null || v === undefined) {\n      v = new Buffer([])\n    } else if (v.toArray) {\n      // converts a BN to a Buffer\n      v = new Buffer(v.toArray())\n    } else {\n      throw new Error('invalid type')\n    }\n  }\n  return v\n}\n"]},"metadata":{},"sourceType":"script"}