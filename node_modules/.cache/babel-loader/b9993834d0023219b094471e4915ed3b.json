{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.WEBUSB_ERROR_MESSAGE = exports.INVALID_PIN_ERROR_MESSAGE = exports.WRONG_PREVIOUS_SESSION_ERROR_MESSAGE = exports.TypedError = exports.TrezorError = exports.ERROR_CODES = void 0;\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _wrapNativeSuper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/wrapNativeSuper\"));\n\nvar ERROR_CODES = {\n  'Init_NotInitialized': 'TrezorConnect not yet initialized',\n  // race condition: call on not initialized Core (usually hot-reloading)\n  'Init_AlreadyInitialized': 'TrezorConnect has been already initialized',\n  // thrown by .init called multiple times\n  'Init_IframeBlocked': 'Iframe blocked',\n  // iframe injection blocked (ad-blocker)\n  'Init_IframeTimeout': 'Iframe timeout',\n  // iframe didn't load in specified time\n  'Init_ManifestMissing': 'Manifest not set. Read more at https://github.com/trezor/connect/blob/develop/docs/index.md',\n  // manifest is not set\n  'Popup_ConnectionMissing': 'Unable to establish connection with iframe',\n  // thrown by popup\n  'Transport_Missing': 'Transport is missing',\n  // no transport available\n  'Transport_InvalidProtobuf': '',\n  // generic error from transport layer (trezor-link)\n  'Method_InvalidPackage': 'This version of trezor-connect is not suitable to work without browser. Use trezor-connect@extended package instead',\n  // thrown by node and react-native env while using regular 'web' package\n  'Method_InvalidParameter': '',\n  // replaced by generic text\n  'Method_NotAllowed': 'Method not allowed for this configuration',\n  // example: device management in popup mode\n  'Method_PermissionsNotGranted': 'Permissions not granted',\n  // permission/confirmation not granted in popup\n  'Method_Cancel': 'Cancelled',\n  // permission/confirmation not granted in popup OR .cancel() custom error\n  'Method_Interrupted': 'Popup closed',\n  // interruption: popup closed\n  'Method_UnknownCoin': 'Coin not found',\n  // coin definition not found\n  'Method_AddressNotMatch': 'Addresses do not match',\n  // thrown by all getAddress methods with custom UI validation\n  'Method_FirmwareUpdate_DownloadFailed': 'Failed to download firmware binary',\n  // thrown by FirmwareUpdate method\n  'Method_CustomMessage_Callback': 'Parameter \"callback\" is not a function',\n  // thrown by CustomMessage method\n  'Method_Discovery_BundleException': '',\n  // thrown by getAccountInfo method\n  'Method_Override': 'override',\n  // inner \"error\", it's more like a interruption\n  'Method_NoResponse': 'Call resolved without response',\n  // thrown by npm index(es), call to Core resolved without response, should not happen\n  'Backend_NotSupported': 'BlockchainLink settings not found in coins.json',\n  // thrown by methods which using backends, blockchainLink not defined for this coin\n  'Backend_WorkerMissing': '',\n  // thrown by BlockchainLink class, worker not specified\n  'Backend_Disconnected': 'Backend disconnected',\n  // thrown by BlockchainLink class\n  'Backend_Invalid': 'Invalid backend',\n  // thrown by BlockchainLink class, invalid backend (ie: backend for wrong coin set)\n  'Backend_Error': '',\n  // thrown by BlockchainLink class, generic message from 'blockchain-link'\n  'Runtime': '',\n  // thrown from several places, this shouldn't ever happen tho\n  'Device_NotFound': 'Device not found',\n  'Device_InitializeFailed': '',\n  // generic error from firmware while calling \"Initialize\" message\n  'Device_FwException': '',\n  // generic FirmwareException type\n  'Device_ModeException': '',\n  // generic Device.UnexpectedMode type\n  'Device_Disconnected': 'Device disconnected',\n  // device disconnected during call\n  'Device_UsedElsewhere': 'Device is used in another window',\n  // interruption: current session toked by other application\n  'Device_InvalidState': 'Passphrase is incorrect',\n  // authorization error (device state comparison)\n  'Device_CallInProgress': 'Device call in progress' // thrown when trying to make another call while current is still running\n\n};\nexports.ERROR_CODES = ERROR_CODES;\n\nvar TrezorError = /*#__PURE__*/function (_Error) {\n  (0, _inheritsLoose2[\"default\"])(TrezorError, _Error);\n\n  function TrezorError(code, message) {\n    var _this;\n\n    _this = _Error.call(this, message) || this;\n    _this.code = code;\n    _this.message = message;\n    return _this;\n  }\n\n  return TrezorError;\n}( /*#__PURE__*/(0, _wrapNativeSuper2[\"default\"])(Error));\n\nexports.TrezorError = TrezorError;\n\nvar TypedError = function TypedError(id, message) {\n  return new TrezorError(id, message || ERROR_CODES[id]);\n}; // a slight hack\n// this error string is hard-coded\n// in both bridge and extension\n\n\nexports.TypedError = TypedError;\nvar WRONG_PREVIOUS_SESSION_ERROR_MESSAGE = 'wrong previous session';\nexports.WRONG_PREVIOUS_SESSION_ERROR_MESSAGE = WRONG_PREVIOUS_SESSION_ERROR_MESSAGE;\nvar INVALID_PIN_ERROR_MESSAGE = 'PIN invalid';\nexports.INVALID_PIN_ERROR_MESSAGE = INVALID_PIN_ERROR_MESSAGE;\nvar WEBUSB_ERROR_MESSAGE = 'NetworkError: Unable to claim interface.';\nexports.WEBUSB_ERROR_MESSAGE = WEBUSB_ERROR_MESSAGE;","map":{"version":3,"sources":["/Users/leondo/Desktop/metamask-auth/node_modules/trezor-connect/lib/constants/errors.js"],"names":["_interopRequireDefault","require","exports","__esModule","WEBUSB_ERROR_MESSAGE","INVALID_PIN_ERROR_MESSAGE","WRONG_PREVIOUS_SESSION_ERROR_MESSAGE","TypedError","TrezorError","ERROR_CODES","_inheritsLoose2","_wrapNativeSuper2","_Error","code","message","_this","call","Error","id"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.WEBUSB_ERROR_MESSAGE = exports.INVALID_PIN_ERROR_MESSAGE = exports.WRONG_PREVIOUS_SESSION_ERROR_MESSAGE = exports.TypedError = exports.TrezorError = exports.ERROR_CODES = void 0;\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _wrapNativeSuper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/wrapNativeSuper\"));\n\nvar ERROR_CODES = {\n  'Init_NotInitialized': 'TrezorConnect not yet initialized',\n  // race condition: call on not initialized Core (usually hot-reloading)\n  'Init_AlreadyInitialized': 'TrezorConnect has been already initialized',\n  // thrown by .init called multiple times\n  'Init_IframeBlocked': 'Iframe blocked',\n  // iframe injection blocked (ad-blocker)\n  'Init_IframeTimeout': 'Iframe timeout',\n  // iframe didn't load in specified time\n  'Init_ManifestMissing': 'Manifest not set. Read more at https://github.com/trezor/connect/blob/develop/docs/index.md',\n  // manifest is not set\n  'Popup_ConnectionMissing': 'Unable to establish connection with iframe',\n  // thrown by popup\n  'Transport_Missing': 'Transport is missing',\n  // no transport available\n  'Transport_InvalidProtobuf': '',\n  // generic error from transport layer (trezor-link)\n  'Method_InvalidPackage': 'This version of trezor-connect is not suitable to work without browser. Use trezor-connect@extended package instead',\n  // thrown by node and react-native env while using regular 'web' package\n  'Method_InvalidParameter': '',\n  // replaced by generic text\n  'Method_NotAllowed': 'Method not allowed for this configuration',\n  // example: device management in popup mode\n  'Method_PermissionsNotGranted': 'Permissions not granted',\n  // permission/confirmation not granted in popup\n  'Method_Cancel': 'Cancelled',\n  // permission/confirmation not granted in popup OR .cancel() custom error\n  'Method_Interrupted': 'Popup closed',\n  // interruption: popup closed\n  'Method_UnknownCoin': 'Coin not found',\n  // coin definition not found\n  'Method_AddressNotMatch': 'Addresses do not match',\n  // thrown by all getAddress methods with custom UI validation\n  'Method_FirmwareUpdate_DownloadFailed': 'Failed to download firmware binary',\n  // thrown by FirmwareUpdate method\n  'Method_CustomMessage_Callback': 'Parameter \"callback\" is not a function',\n  // thrown by CustomMessage method\n  'Method_Discovery_BundleException': '',\n  // thrown by getAccountInfo method\n  'Method_Override': 'override',\n  // inner \"error\", it's more like a interruption\n  'Method_NoResponse': 'Call resolved without response',\n  // thrown by npm index(es), call to Core resolved without response, should not happen\n  'Backend_NotSupported': 'BlockchainLink settings not found in coins.json',\n  // thrown by methods which using backends, blockchainLink not defined for this coin\n  'Backend_WorkerMissing': '',\n  // thrown by BlockchainLink class, worker not specified\n  'Backend_Disconnected': 'Backend disconnected',\n  // thrown by BlockchainLink class\n  'Backend_Invalid': 'Invalid backend',\n  // thrown by BlockchainLink class, invalid backend (ie: backend for wrong coin set)\n  'Backend_Error': '',\n  // thrown by BlockchainLink class, generic message from 'blockchain-link'\n  'Runtime': '',\n  // thrown from several places, this shouldn't ever happen tho\n  'Device_NotFound': 'Device not found',\n  'Device_InitializeFailed': '',\n  // generic error from firmware while calling \"Initialize\" message\n  'Device_FwException': '',\n  // generic FirmwareException type\n  'Device_ModeException': '',\n  // generic Device.UnexpectedMode type\n  'Device_Disconnected': 'Device disconnected',\n  // device disconnected during call\n  'Device_UsedElsewhere': 'Device is used in another window',\n  // interruption: current session toked by other application\n  'Device_InvalidState': 'Passphrase is incorrect',\n  // authorization error (device state comparison)\n  'Device_CallInProgress': 'Device call in progress' // thrown when trying to make another call while current is still running\n\n};\nexports.ERROR_CODES = ERROR_CODES;\n\nvar TrezorError = /*#__PURE__*/function (_Error) {\n  (0, _inheritsLoose2[\"default\"])(TrezorError, _Error);\n\n  function TrezorError(code, message) {\n    var _this;\n\n    _this = _Error.call(this, message) || this;\n    _this.code = code;\n    _this.message = message;\n    return _this;\n  }\n\n  return TrezorError;\n}( /*#__PURE__*/(0, _wrapNativeSuper2[\"default\"])(Error));\n\nexports.TrezorError = TrezorError;\n\nvar TypedError = function TypedError(id, message) {\n  return new TrezorError(id, message || ERROR_CODES[id]);\n}; // a slight hack\n// this error string is hard-coded\n// in both bridge and extension\n\n\nexports.TypedError = TypedError;\nvar WRONG_PREVIOUS_SESSION_ERROR_MESSAGE = 'wrong previous session';\nexports.WRONG_PREVIOUS_SESSION_ERROR_MESSAGE = WRONG_PREVIOUS_SESSION_ERROR_MESSAGE;\nvar INVALID_PIN_ERROR_MESSAGE = 'PIN invalid';\nexports.INVALID_PIN_ERROR_MESSAGE = INVALID_PIN_ERROR_MESSAGE;\nvar WEBUSB_ERROR_MESSAGE = 'NetworkError: Unable to claim interface.';\nexports.WEBUSB_ERROR_MESSAGE = WEBUSB_ERROR_MESSAGE;"]},"metadata":{},"sourceType":"script"}