{"ast":null,"code":"var assert = require('assert');\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar crypto = require('crypto');\n\nvar bs58check = require('bs58check');\n\nvar secp256k1 = require('secp256k1');\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8');\nvar HARDENED_OFFSET = 0x80000000;\nvar LEN = 78; // Bitcoin hardcoded by default, can use package `coininfo` for others\n\nvar BITCOIN_VERSIONS = {\n  private: 0x0488ADE4,\n  public: 0x0488B21E\n};\n\nfunction HDKey(versions) {\n  this.versions = versions || BITCOIN_VERSIONS;\n  this.depth = 0;\n  this.index = 0;\n  this._privateKey = null;\n  this._publicKey = null;\n  this.chainCode = null;\n  this._fingerprint = 0;\n  this.parentFingerprint = 0;\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', {\n  get: function () {\n    return this._fingerprint;\n  }\n});\nObject.defineProperty(HDKey.prototype, 'identifier', {\n  get: function () {\n    return this._identifier;\n  }\n});\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', {\n  get: function () {\n    return this.identifier;\n  }\n});\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey;\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.');\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key');\n    this._privateKey = value;\n    this._publicKey = Buffer.from(secp256k1.publicKeyCreate(value, true));\n    this._identifier = hash160(this.publicKey);\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);\n  }\n});\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey;\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.');\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key');\n    this._publicKey = Buffer.from(secp256k1.publicKeyConvert(value, true)); // force compressed point\n\n    this._identifier = hash160(this.publicKey);\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);\n    this._privateKey = null;\n  }\n});\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])));else return null;\n  }\n});\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey));\n  }\n});\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this;\n  }\n\n  var entries = path.split('/');\n  var hdkey = this;\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"');\n      return;\n    }\n\n    var hardened = c.length > 1 && c[c.length - 1] === \"'\";\n    var childIndex = parseInt(c, 10); // & (HARDENED_OFFSET - 1)\n\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index');\n    if (hardened) childIndex += HARDENED_OFFSET;\n    hdkey = hdkey.deriveChild(childIndex);\n  });\n  return hdkey;\n};\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET;\n  var indexBuffer = Buffer.allocUnsafe(4);\n  indexBuffer.writeUInt32BE(index, 0);\n  var data;\n\n  if (isHardened) {\n    // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key');\n    var pk = this.privateKey;\n    var zb = Buffer.alloc(1, 0);\n    pk = Buffer.concat([zb, pk]); // data = 0x00 || ser256(kpar) || ser32(index)\n\n    data = Buffer.concat([pk, indexBuffer]);\n  } else {\n    // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer]);\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest();\n  var IL = I.slice(0, 32);\n  var IR = I.slice(32);\n  var hd = new HDKey(this.versions); // Private parent key -> private child key\n\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(this.privateKey), IL)); // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1);\n    } // Public parent key -> public child key\n\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(this.publicKey), IL, true)); // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1);\n    }\n  }\n\n  hd.chainCode = IR;\n  hd.depth = this.depth + 1;\n  hd.parentFingerprint = this.fingerprint; // .readUInt32BE(0)\n\n  hd.index = index;\n  return hd;\n};\n\nHDKey.prototype.sign = function (hash) {\n  return Buffer.from(secp256k1.ecdsaSign(hash, this.privateKey).signature);\n};\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(hash), Uint8Array.from(this.publicKey));\n};\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey);\n  this._privateKey = null;\n  return this;\n};\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  };\n};\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest();\n  var IL = I.slice(0, 32);\n  var IR = I.slice(32);\n  var hdkey = new HDKey(versions);\n  hdkey.chainCode = IR;\n  hdkey.privateKey = IL;\n  return hdkey;\n};\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS;\n  var hdkey = new HDKey(versions);\n  var keyBuffer = bs58check.decode(base58key);\n  var version = keyBuffer.readUInt32BE(0);\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public');\n  hdkey.depth = keyBuffer.readUInt8(4);\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5);\n  hdkey.index = keyBuffer.readUInt32BE(9);\n  hdkey.chainCode = keyBuffer.slice(13, 45);\n  var key = keyBuffer.slice(45);\n\n  if (key.readUInt8(0) === 0) {\n    // private\n    assert(version === versions.private, 'Version mismatch: version does not match private');\n    hdkey.privateKey = key.slice(1); // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public');\n    hdkey.publicKey = key;\n  }\n\n  return hdkey;\n};\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv);\n};\n\nfunction serialize(hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN);\n  buffer.writeUInt32BE(version, 0);\n  buffer.writeUInt8(hdkey.depth, 4);\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000;\n  buffer.writeUInt32BE(fingerprint, 5);\n  buffer.writeUInt32BE(hdkey.index, 9);\n  hdkey.chainCode.copy(buffer, 13);\n  key.copy(buffer, 45);\n  return buffer;\n}\n\nfunction hash160(buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest();\n  return crypto.createHash('ripemd160').update(sha).digest();\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET;\nmodule.exports = HDKey;","map":{"version":3,"sources":["/Users/leondo/Desktop/metamask-auth/node_modules/hdkey/lib/hdkey.js"],"names":["assert","require","Buffer","crypto","bs58check","secp256k1","MASTER_SECRET","from","HARDENED_OFFSET","LEN","BITCOIN_VERSIONS","private","public","HDKey","versions","depth","index","_privateKey","_publicKey","chainCode","_fingerprint","parentFingerprint","Object","defineProperty","prototype","get","_identifier","identifier","set","value","equal","length","privateKeyVerify","publicKeyCreate","hash160","publicKey","slice","readUInt32BE","publicKeyVerify","publicKeyConvert","encode","serialize","concat","alloc","privateKey","derive","path","entries","split","hdkey","forEach","c","i","test","hardened","childIndex","parseInt","deriveChild","isHardened","indexBuffer","allocUnsafe","writeUInt32BE","data","pk","zb","I","createHmac","update","digest","IL","IR","hd","privateKeyTweakAdd","err","publicKeyTweakAdd","fingerprint","sign","hash","ecdsaSign","signature","verify","ecdsaVerify","Uint8Array","wipePrivateData","randomBytes","copy","toJSON","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","keyBuffer","decode","version","readUInt8","key","fromJSON","obj","buffer","writeUInt8","buf","sha","createHash","module","exports"],"mappings":"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","sourcesContent":["var assert = require('assert')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar bs58check = require('bs58check')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = Buffer.from(secp256k1.publicKeyCreate(value, true))\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = Buffer.from(secp256k1.publicKeyConvert(value, true)) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(this.privateKey), IL))\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(this.publicKey), IL, true))\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return Buffer.from(secp256k1.ecdsaSign(hash, this.privateKey).signature)\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.ecdsaVerify(\n    Uint8Array.from(signature),\n    Uint8Array.from(hash),\n    Uint8Array.from(this.publicKey)\n  )\n}\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey)\n  this._privateKey = null\n  return this\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = bs58check.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('ripemd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n"]},"metadata":{},"sourceType":"script"}