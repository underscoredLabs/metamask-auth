{"ast":null,"code":"// Consistent with Lattice's IV\nconst AES_IV = [0x6d, 0x79, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64];\nconst ADDR_STR_LEN = 129; // 128-char strings (null terminated)\n// Decrypted response lengths will be fixed for any given message type.\n// These are defined in the Lattice spec.\n// Every decrypted response should have a 65-byte pubkey prefixing it (and a 4-byte request ID)\n// These are NOT counted in `decResLengths`, meaning these values are 69-bytes smaller than the\n// corresponding structs in firmware.\n\nconst decResLengths = {\n  finalizePair: 0,\n  // Only contains the pubkey\n  getAddresses: 10 * ADDR_STR_LEN,\n  // 10x 129 byte strings (128 bytes + null terminator)\n  sign: 1090,\n  // 1 DER signature for ETH, 10 for BTC + change pubkeyhash\n  getWallets: 142,\n  // 71 bytes per wallet record (response contains internal and external)\n  addAbiDefs: 8,\n  test: 1646 // Max size of test response payload\n\n}; // Every corresponding decrypted response struct in firmware has a pubkey\n// and checksum added. These are not included in `decResLengths`\n\nconst DES_RES_EXTRADATA_LEN = 69; // Encrypted responses also have metadata\n// Prefix:\n// * protocol version (1 byte)\n// * response type, reserved (1 byte) -- not used\n// * response id (4 bytes) -- not used\n// * payload length (2 bytes)\n// * response code (1 byte)\n// Suffix:\n// * checksum (4 bytes) -- NOT the same checksum as inside the decrypted msg\n\nconst ENC_MSG_METADATA_LEN = 13;\nconst ENC_MSG_EXTRA_LEN = DES_RES_EXTRADATA_LEN + ENC_MSG_METADATA_LEN; // Per Lattice spec, all encrypted messages must fit in a buffer of this size.\n// The length comes from the largest request/response data type size\n// We also add the prefix length\n\nlet ENC_MSG_LEN = 0;\nObject.keys(decResLengths).forEach(k => {\n  if (decResLengths[k] + ENC_MSG_EXTRA_LEN > ENC_MSG_LEN) ENC_MSG_LEN = decResLengths[k] + ENC_MSG_EXTRA_LEN;\n});\nconst deviceCodes = {\n  'CONNECT': 1,\n  'ENCRYPTED_REQUEST': 2\n};\nconst encReqCodes = {\n  'FINALIZE_PAIRING': 0x00,\n  'GET_ADDRESSES': 0x01,\n  'ADD_PERMISSION': 0x02,\n  'SIGN_TRANSACTION': 0x03,\n  'GET_WALLETS': 0x04,\n  'ADD_PERMISSION_V0': 0x05,\n  'ADD_ABI_DEFS': 0x06,\n  'TEST': 0x07\n};\nconst messageConstants = {\n  'NOT_PAIRED': 0x00,\n  'PAIRED': 0x01\n};\nconst addressSizes = {\n  'BTC': 20,\n  // 20 byte pubkeyhash\n  'ETH': 20 // 20 byte address not including 0x prefix\n\n};\nconst responseCodes = {\n  RESP_SUCCESS: 0x00,\n  RESP_ERR_INVALID_MSG: 0x80,\n  RESP_ERR_UNSUPPORTED_VER: 0x81,\n  RESP_ERR_DEV_BUSY: 0x82,\n  RESP_ERR_USER_TIMEOUT: 0x83,\n  RESP_ERR_USER_DECLINED: 0x84,\n  RESP_ERR_PAIR_FAIL: 0x85,\n  RESP_ERR_PAIR_DISABLED: 0x86,\n  RESP_ERR_PERMISSION_DISABLED: 0x87,\n  RESP_ERR_INTERNAL: 0x88,\n  RESP_ERR_GCE_TIMEOUT: 0x89,\n  RESP_ERR_WALLET_NOT_PRESENT: 0x8a,\n  RESP_ERR_DEV_LOCKED: 0x8b,\n  RESP_ERR_DISABLED: 0x8c,\n  RESP_ERR_ALREADY: 0x8d\n};\nconst responseMsgs = {\n  [responseCodes.RESP_SUCCESS]: 0x00,\n  [responseCodes.RESP_ERR_INVALID_MSG]: 'Invalid Request',\n  [responseCodes.RESP_ERR_UNSUPPORTED_VER]: 'Unsupported Version',\n  [responseCodes.RESP_ERR_DEV_BUSY]: 'Device Busy',\n  [responseCodes.RESP_ERR_USER_TIMEOUT]: 'Timeout Waiting for User',\n  [responseCodes.RESP_ERR_USER_DECLINED]: 'Request Declined by User',\n  [responseCodes.RESP_ERR_PAIR_FAIL]: 'Pairing Failed',\n  [responseCodes.RESP_ERR_PAIR_DISABLED]: 'Pairing is Currently Disabled',\n  [responseCodes.RESP_ERR_PERMISSION_DISABLED]: 'Automated Signing is Currently Disabled',\n  [responseCodes.RESP_ERR_INTERNAL]: 'Device Error',\n  [responseCodes.RESP_ERR_GCE_TIMEOUT]: 'Timeout',\n  [responseCodes.RESP_ERR_WALLET_NOT_PRESENT]: 'Incorrect Wallet UID Provided',\n  [responseCodes.RESP_ERR_DEV_LOCKED]: 'Device Locked',\n  [responseCodes.RESP_ERR_DISABLED]: 'Disabled',\n  [responseCodes.RESP_ERR_ALREADY]: 'Record already exists. You must first remove it on your device.'\n};\nconst signingSchema = {\n  BTC_TRANSFER: 0,\n  ETH_TRANSFER: 1,\n  ERC20_TRANSFER: 2,\n  ETH_MSG: 3\n};\nconst ethMsgProtocol = {\n  SIGN_PERSONAL: 0\n};\nconst REQUEST_TYPE_BYTE = 0x02; // For all HSM-bound requests\n\nconst VERSION_BYTE = 1;\nconst HARDENED_OFFSET = 0x80000000; // Hardened offset\n\nconst HANDLE_LARGER_CHAIN_ID = 255; // ChainId value to signify larger chainID is in data buffer\n\nconst MAX_CHAIN_ID_BYTES = 8; // Max number of bytes to contain larger chainID in data buffer\n\nconst BASE_URL = 'https://signing.gridpl.us';\nconst ETH_ABI_LATTICE_FW_TYPE_MAP = {\n  'address': 1,\n  'bool': 2,\n  'uint8': 3,\n  'uint16': 4,\n  'uint32': 5,\n  'uint64': 6,\n  'uint128': 7,\n  'uint256': 8,\n  // 'int8': 9,      // We do not support signed integer types in v1 because we can't display them\n  // 'int16': 10,\n  // 'int24': 11,\n  // 'int64': 12,\n  // 'int128': 13,\n  // 'int256': 14,\n  'uint': 15,\n  // 'int': 16,\n  'bytes1': 17,\n  'bytes2': 18,\n  'bytes3': 19,\n  'bytes4': 20,\n  'bytes5': 21,\n  'bytes6': 22,\n  'bytes7': 23,\n  'bytes8': 24,\n  'bytes9': 25,\n  'bytes10': 26,\n  'bytes11': 27,\n  'bytes12': 28,\n  'bytes13': 29,\n  'bytes14': 30,\n  'bytes15': 31,\n  'bytes16': 32,\n  'bytes17': 33,\n  'bytes18': 34,\n  'bytes19': 35,\n  'bytes20': 36,\n  'bytes21': 37,\n  'bytes22': 38,\n  'bytes23': 39,\n  'bytes24': 40,\n  'bytes25': 41,\n  'bytes26': 42,\n  'bytes27': 43,\n  'bytes28': 44,\n  'bytes29': 45,\n  'bytes30': 46,\n  'bytes31': 47,\n  'bytes32': 48,\n  'bytes': 49,\n  'string': 50,\n  'tuple1': 51,\n  'tuple2': 52,\n  'tuple3': 53,\n  'tuple4': 54,\n  'tuple5': 55,\n  'tuple6': 56,\n  'tuple7': 57,\n  'tuple8': 58,\n  'tuple9': 59,\n  'tuple10': 60,\n  'tuple11': 61,\n  'tuple12': 62,\n  'tuple13': 63,\n  'tuple14': 64,\n  'tuple15': 65,\n  'tuple16': 66,\n  'tuple17': 67 // Firmware currently cannot support tuples larger than this\n  // 'tuple18': 68,\n  // 'tuple19': 69,\n  // 'tuple20': 70,\n\n};\n\nfunction getFwVersionConst(v) {\n  const c = {\n    reqMaxDataSz: 1152\n  };\n\n  if (v.length === 0 || v[1] < 10 && v[2] === 0) {\n    c.ethMaxDataSz = c.reqMaxDataSz - 128;\n    c.ethMaxMsgSz = c.ethMaxDataSz;\n    c.ethMaxGasPrice = 500000000000; // 500 gwei\n\n    c.addrFlagsAllowed = false;\n  } else if (v[1] >= 10 && v[2] >= 0) {\n    c.reqMaxDataSz = 1678;\n    c.ethMaxDataSz = c.reqMaxDataSz - 128;\n    c.ethMaxMsgSz = c.ethMaxDataSz;\n    c.ethMaxGasPrice = 20000000000000; // 20000 gwei\n\n    c.addrFlagsAllowed = true;\n  }\n\n  return c;\n}\n\nmodule.exports = {\n  getFwVersionConst,\n  ADDR_STR_LEN,\n  AES_IV,\n  BASE_URL,\n  ENC_MSG_LEN,\n  addressSizes,\n  decResLengths,\n  deviceCodes,\n  encReqCodes,\n  ethMsgProtocol,\n  messageConstants,\n  responseCodes,\n  responseMsgs,\n  signingSchema,\n  REQUEST_TYPE_BYTE,\n  VERSION_BYTE,\n  HARDENED_OFFSET,\n  HANDLE_LARGER_CHAIN_ID,\n  MAX_CHAIN_ID_BYTES,\n  ETH_ABI_LATTICE_FW_TYPE_MAP\n};","map":{"version":3,"sources":["/Users/leondo/Desktop/metamask-auth/node_modules/gridplus-sdk/src/constants.js"],"names":["AES_IV","ADDR_STR_LEN","decResLengths","finalizePair","getAddresses","sign","getWallets","addAbiDefs","test","DES_RES_EXTRADATA_LEN","ENC_MSG_METADATA_LEN","ENC_MSG_EXTRA_LEN","ENC_MSG_LEN","Object","keys","forEach","k","deviceCodes","encReqCodes","messageConstants","addressSizes","responseCodes","RESP_SUCCESS","RESP_ERR_INVALID_MSG","RESP_ERR_UNSUPPORTED_VER","RESP_ERR_DEV_BUSY","RESP_ERR_USER_TIMEOUT","RESP_ERR_USER_DECLINED","RESP_ERR_PAIR_FAIL","RESP_ERR_PAIR_DISABLED","RESP_ERR_PERMISSION_DISABLED","RESP_ERR_INTERNAL","RESP_ERR_GCE_TIMEOUT","RESP_ERR_WALLET_NOT_PRESENT","RESP_ERR_DEV_LOCKED","RESP_ERR_DISABLED","RESP_ERR_ALREADY","responseMsgs","signingSchema","BTC_TRANSFER","ETH_TRANSFER","ERC20_TRANSFER","ETH_MSG","ethMsgProtocol","SIGN_PERSONAL","REQUEST_TYPE_BYTE","VERSION_BYTE","HARDENED_OFFSET","HANDLE_LARGER_CHAIN_ID","MAX_CHAIN_ID_BYTES","BASE_URL","ETH_ABI_LATTICE_FW_TYPE_MAP","getFwVersionConst","v","c","reqMaxDataSz","length","ethMaxDataSz","ethMaxMsgSz","ethMaxGasPrice","addrFlagsAllowed","module","exports"],"mappings":"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","sourcesContent":["// Consistent with Lattice's IV\nconst AES_IV = [0x6d, 0x79, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64]\n\nconst ADDR_STR_LEN = 129; // 128-char strings (null terminated)\n\n// Decrypted response lengths will be fixed for any given message type.\n// These are defined in the Lattice spec.\n// Every decrypted response should have a 65-byte pubkey prefixing it (and a 4-byte request ID)\n// These are NOT counted in `decResLengths`, meaning these values are 69-bytes smaller than the\n// corresponding structs in firmware.\nconst decResLengths = {\n    finalizePair: 0,                    // Only contains the pubkey\n    getAddresses: 10 * ADDR_STR_LEN,    // 10x 129 byte strings (128 bytes + null terminator)\n    sign: 1090,                         // 1 DER signature for ETH, 10 for BTC + change pubkeyhash\n    getWallets: 142,                    // 71 bytes per wallet record (response contains internal and external)\n    addAbiDefs: 8,\n    test: 1646                          // Max size of test response payload\n}\n\n// Every corresponding decrypted response struct in firmware has a pubkey\n// and checksum added. These are not included in `decResLengths`\nconst DES_RES_EXTRADATA_LEN = 69; \n\n// Encrypted responses also have metadata\n// Prefix:\n// * protocol version (1 byte)\n// * response type, reserved (1 byte) -- not used\n// * response id (4 bytes) -- not used\n// * payload length (2 bytes)\n// * response code (1 byte)\n// Suffix:\n// * checksum (4 bytes) -- NOT the same checksum as inside the decrypted msg\nconst ENC_MSG_METADATA_LEN = 13;\n\nconst ENC_MSG_EXTRA_LEN = DES_RES_EXTRADATA_LEN + ENC_MSG_METADATA_LEN;\n// Per Lattice spec, all encrypted messages must fit in a buffer of this size.\n// The length comes from the largest request/response data type size\n// We also add the prefix length\nlet ENC_MSG_LEN = 0;\nObject.keys(decResLengths).forEach((k) => {\n    if (decResLengths[k] + ENC_MSG_EXTRA_LEN > ENC_MSG_LEN)\n        ENC_MSG_LEN = decResLengths[k] + ENC_MSG_EXTRA_LEN;\n})\n  \nconst deviceCodes = {\n    'CONNECT': 1,\n    'ENCRYPTED_REQUEST': 2,\n}\n\nconst encReqCodes = {\n    'FINALIZE_PAIRING': 0x00,\n    'GET_ADDRESSES': 0x01,\n    'ADD_PERMISSION': 0x02,\n    'SIGN_TRANSACTION': 0x03,\n    'GET_WALLETS': 0x04,\n    'ADD_PERMISSION_V0': 0x05,\n    'ADD_ABI_DEFS': 0x06,\n    'TEST': 0x07,\n}\n\nconst messageConstants = {\n    'NOT_PAIRED': 0x00,\n    'PAIRED': 0x01,\n}\n\nconst addressSizes = {\n    'BTC': 20,  // 20 byte pubkeyhash\n    'ETH': 20,  // 20 byte address not including 0x prefix\n}\n  \nconst responseCodes = {\n    RESP_SUCCESS: 0x00,\n    RESP_ERR_INVALID_MSG: 0x80,\n    RESP_ERR_UNSUPPORTED_VER: 0x81,\n    RESP_ERR_DEV_BUSY: 0x82,\n    RESP_ERR_USER_TIMEOUT: 0x83,\n    RESP_ERR_USER_DECLINED: 0x84,\n    RESP_ERR_PAIR_FAIL: 0x85,\n    RESP_ERR_PAIR_DISABLED: 0x86,\n    RESP_ERR_PERMISSION_DISABLED: 0x87,\n    RESP_ERR_INTERNAL: 0x88,\n    RESP_ERR_GCE_TIMEOUT: 0x89,\n    RESP_ERR_WALLET_NOT_PRESENT: 0x8a,\n    RESP_ERR_DEV_LOCKED: 0x8b,\n    RESP_ERR_DISABLED: 0x8c,\n    RESP_ERR_ALREADY: 0x8d,\n}\n\nconst responseMsgs = {\n    [responseCodes.RESP_SUCCESS]: 0x00,\n    [responseCodes.RESP_ERR_INVALID_MSG]: 'Invalid Request',\n    [responseCodes.RESP_ERR_UNSUPPORTED_VER]: 'Unsupported Version',\n    [responseCodes.RESP_ERR_DEV_BUSY]: 'Device Busy',\n    [responseCodes.RESP_ERR_USER_TIMEOUT]: 'Timeout Waiting for User',\n    [responseCodes.RESP_ERR_USER_DECLINED]: 'Request Declined by User',\n    [responseCodes.RESP_ERR_PAIR_FAIL]: 'Pairing Failed',\n    [responseCodes.RESP_ERR_PAIR_DISABLED]: 'Pairing is Currently Disabled',\n    [responseCodes.RESP_ERR_PERMISSION_DISABLED]: 'Automated Signing is Currently Disabled',\n    [responseCodes.RESP_ERR_INTERNAL]: 'Device Error',\n    [responseCodes.RESP_ERR_GCE_TIMEOUT]: 'Timeout',\n    [responseCodes.RESP_ERR_WALLET_NOT_PRESENT]: 'Incorrect Wallet UID Provided',\n    [responseCodes.RESP_ERR_DEV_LOCKED]: 'Device Locked',\n    [responseCodes.RESP_ERR_DISABLED]: 'Disabled',\n    [responseCodes.RESP_ERR_ALREADY]: 'Record already exists. You must first remove it on your device.'\n}\n \n\nconst signingSchema = {\n    BTC_TRANSFER: 0,\n    ETH_TRANSFER: 1,\n    ERC20_TRANSFER: 2,\n    ETH_MSG: 3,\n}\n\nconst ethMsgProtocol = {\n    SIGN_PERSONAL: 0,\n}\n\nconst REQUEST_TYPE_BYTE = 0x02; // For all HSM-bound requests\nconst VERSION_BYTE = 1;\nconst HARDENED_OFFSET = 0x80000000; // Hardened offset\nconst HANDLE_LARGER_CHAIN_ID = 255; // ChainId value to signify larger chainID is in data buffer\nconst MAX_CHAIN_ID_BYTES = 8; // Max number of bytes to contain larger chainID in data buffer\n\nconst BASE_URL = 'https://signing.gridpl.us';\n\nconst ETH_ABI_LATTICE_FW_TYPE_MAP = {\n    'address': 1,\n    'bool': 2,\n    'uint8': 3,\n    'uint16': 4,\n    'uint32': 5,\n    'uint64': 6,\n    'uint128': 7,\n    'uint256': 8,\n    // 'int8': 9,      // We do not support signed integer types in v1 because we can't display them\n    // 'int16': 10,\n    // 'int24': 11,\n    // 'int64': 12,\n    // 'int128': 13,\n    // 'int256': 14,\n    'uint': 15,\n    // 'int': 16,\n    'bytes1': 17,\n    'bytes2': 18,\n    'bytes3': 19,\n    'bytes4': 20,\n    'bytes5': 21,\n    'bytes6': 22,\n    'bytes7': 23,\n    'bytes8': 24,\n    'bytes9': 25,\n    'bytes10': 26,\n    'bytes11': 27,\n    'bytes12': 28,\n    'bytes13': 29,\n    'bytes14': 30,\n    'bytes15': 31,\n    'bytes16': 32,\n    'bytes17': 33,\n    'bytes18': 34,\n    'bytes19': 35,\n    'bytes20': 36,\n    'bytes21': 37,\n    'bytes22': 38,\n    'bytes23': 39,\n    'bytes24': 40,\n    'bytes25': 41,\n    'bytes26': 42,\n    'bytes27': 43,\n    'bytes28': 44,\n    'bytes29': 45,\n    'bytes30': 46,\n    'bytes31': 47,\n    'bytes32': 48,\n    'bytes': 49,\n    'string': 50,\n    'tuple1': 51,\n    'tuple2': 52,\n    'tuple3': 53,\n    'tuple4': 54,\n    'tuple5': 55,\n    'tuple6': 56,\n    'tuple7': 57,\n    'tuple8': 58,\n    'tuple9': 59,\n    'tuple10': 60,\n    'tuple11': 61,\n    'tuple12': 62,\n    'tuple13': 63,\n    'tuple14': 64,\n    'tuple15': 65,\n    'tuple16': 66,\n    'tuple17': 67,  // Firmware currently cannot support tuples larger than this\n    // 'tuple18': 68,\n    // 'tuple19': 69,\n    // 'tuple20': 70,\n};\n\nfunction getFwVersionConst(v) {\n    const c = {\n        reqMaxDataSz: 1152,\n    };\n    if (v.length === 0 || (v[1] < 10 && v[2] === 0)) {\n        c.ethMaxDataSz = c.reqMaxDataSz - 128;\n        c.ethMaxMsgSz = c.ethMaxDataSz;\n        c.ethMaxGasPrice = 500000000000; // 500 gwei\n        c.addrFlagsAllowed = false;\n    } else if (v[1] >= 10 && v[2] >= 0) {\n        c.reqMaxDataSz = 1678;\n        c.ethMaxDataSz = c.reqMaxDataSz - 128;\n        c.ethMaxMsgSz = c.ethMaxDataSz;\n        c.ethMaxGasPrice = 20000000000000; // 20000 gwei\n        c.addrFlagsAllowed = true;\n    }\n    return c;\n}\n\nmodule.exports = {\n    getFwVersionConst,\n    ADDR_STR_LEN,\n    AES_IV,\n    BASE_URL,\n    ENC_MSG_LEN,\n    addressSizes,\n    decResLengths,\n    deviceCodes,\n    encReqCodes,\n    ethMsgProtocol,\n    messageConstants,\n    responseCodes,\n    responseMsgs,\n    signingSchema,\n    REQUEST_TYPE_BYTE,\n    VERSION_BYTE,\n    HARDENED_OFFSET,\n    HANDLE_LARGER_CHAIN_ID,\n    MAX_CHAIN_ID_BYTES,\n    ETH_ABI_LATTICE_FW_TYPE_MAP,\n}"]},"metadata":{},"sourceType":"script"}