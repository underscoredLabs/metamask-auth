{"ast":null,"code":"import readByte from '../byte/read';\n/**\n * Returns an Array containing bitLength bits starting at bitOffset.\n *\n * @example\n * readBuffer(buffer, 2, 4) => [0,0,1,0]\n *\n * @param {Buffer} buffer the buffer to read\n * @param {Number} offset where to start (in bits)\n * @param {Number} length how many bits to read\n * @returns {Array}\n */\n\nexport default (function (buffer, offset, length) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n\n  if (!length) length = buffer.length * 8 - offset;\n  var start = Math.floor(offset / 8);\n  var bytesToRead = Math.floor(length / 8) + 2;\n  var arr = [];\n  arr.length = bytesToRead * 8;\n\n  for (var i = 0; i < bytesToRead; i++) {\n    var toRead = buffer[start + i];\n    if (toRead === undefined) continue;\n    var bits = readByte(buffer[start + i]);\n    arr[i * 8] = bits[0];\n    arr[i * 8 + 1] = bits[1];\n    arr[i * 8 + 2] = bits[2];\n    arr[i * 8 + 3] = bits[3];\n    arr[i * 8 + 4] = bits[4];\n    arr[i * 8 + 5] = bits[5];\n    arr[i * 8 + 6] = bits[6];\n    arr[i * 8 + 7] = bits[7];\n  }\n\n  var subOffset = offset % 8;\n  return arr.slice(subOffset, subOffset + length);\n});","map":{"version":3,"sources":["/Users/leondo/Desktop/metamask-auth/node_modules/bitwise/esm/buffer/read.js"],"names":["readByte","buffer","offset","length","start","Math","floor","bytesToRead","arr","i","toRead","undefined","bits","subOffset","slice"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,gBAAgB,UAAUC,MAAV,EAAkBC,MAAlB,EAA0BC,MAA1B,EAAkC;AAC9C,MAAID,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,IAAAA,MAAM,GAAG,CAAT;AAAa;;AACtC,MAAI,CAACC,MAAL,EACIA,MAAM,GAAGF,MAAM,CAACE,MAAP,GAAgB,CAAhB,GAAoBD,MAA7B;AACJ,MAAIE,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWJ,MAAM,GAAG,CAApB,CAAZ;AACA,MAAIK,WAAW,GAAGF,IAAI,CAACC,KAAL,CAAWH,MAAM,GAAG,CAApB,IAAyB,CAA3C;AACA,MAAIK,GAAG,GAAG,EAAV;AACAA,EAAAA,GAAG,CAACL,MAAJ,GAAaI,WAAW,GAAG,CAA3B;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAApB,EAAiCE,CAAC,EAAlC,EAAsC;AAClC,QAAIC,MAAM,GAAGT,MAAM,CAACG,KAAK,GAAGK,CAAT,CAAnB;AACA,QAAIC,MAAM,KAAKC,SAAf,EACI;AACJ,QAAIC,IAAI,GAAGZ,QAAQ,CAACC,MAAM,CAACG,KAAK,GAAGK,CAAT,CAAP,CAAnB;AACAD,IAAAA,GAAG,CAACC,CAAC,GAAG,CAAL,CAAH,GAAaG,IAAI,CAAC,CAAD,CAAjB;AACAJ,IAAAA,GAAG,CAACC,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAH,GAAiBG,IAAI,CAAC,CAAD,CAArB;AACAJ,IAAAA,GAAG,CAACC,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAH,GAAiBG,IAAI,CAAC,CAAD,CAArB;AACAJ,IAAAA,GAAG,CAACC,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAH,GAAiBG,IAAI,CAAC,CAAD,CAArB;AACAJ,IAAAA,GAAG,CAACC,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAH,GAAiBG,IAAI,CAAC,CAAD,CAArB;AACAJ,IAAAA,GAAG,CAACC,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAH,GAAiBG,IAAI,CAAC,CAAD,CAArB;AACAJ,IAAAA,GAAG,CAACC,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAH,GAAiBG,IAAI,CAAC,CAAD,CAArB;AACAJ,IAAAA,GAAG,CAACC,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAH,GAAiBG,IAAI,CAAC,CAAD,CAArB;AACH;;AACD,MAAIC,SAAS,GAAGX,MAAM,GAAG,CAAzB;AACA,SAAOM,GAAG,CAACM,KAAJ,CAAUD,SAAV,EAAqBA,SAAS,GAAGV,MAAjC,CAAP;AACH,CAxBD","sourcesContent":["import readByte from '../byte/read';\n/**\n * Returns an Array containing bitLength bits starting at bitOffset.\n *\n * @example\n * readBuffer(buffer, 2, 4) => [0,0,1,0]\n *\n * @param {Buffer} buffer the buffer to read\n * @param {Number} offset where to start (in bits)\n * @param {Number} length how many bits to read\n * @returns {Array}\n */\nexport default (function (buffer, offset, length) {\n    if (offset === void 0) { offset = 0; }\n    if (!length)\n        length = buffer.length * 8 - offset;\n    var start = Math.floor(offset / 8);\n    var bytesToRead = Math.floor(length / 8) + 2;\n    var arr = [];\n    arr.length = bytesToRead * 8;\n    for (var i = 0; i < bytesToRead; i++) {\n        var toRead = buffer[start + i];\n        if (toRead === undefined)\n            continue;\n        var bits = readByte(buffer[start + i]);\n        arr[i * 8] = bits[0];\n        arr[i * 8 + 1] = bits[1];\n        arr[i * 8 + 2] = bits[2];\n        arr[i * 8 + 3] = bits[3];\n        arr[i * 8 + 4] = bits[4];\n        arr[i * 8 + 5] = bits[5];\n        arr[i * 8 + 6] = bits[6];\n        arr[i * 8 + 7] = bits[7];\n    }\n    var subOffset = offset % 8;\n    return arr.slice(subOffset, subOffset + length);\n});\n"]},"metadata":{},"sourceType":"module"}