{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\n\nconst secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst bytes_1 = require(\"./bytes\");\n\nconst hash_1 = require(\"./hash\");\n\nconst helpers_1 = require(\"./helpers\");\n\nconst types_1 = require(\"./types\");\n\nfunction ecsign(msgHash, privateKey, chainId) {\n  const {\n    signature,\n    recid: recovery\n  } = secp256k1_1.ecdsaSign(msgHash, privateKey);\n  const r = Buffer.from(signature.slice(0, 32));\n  const s = Buffer.from(signature.slice(32, 64));\n\n  if (!chainId || typeof chainId === 'number') {\n    // return legacy type ECDSASignature (deprecated in favor of ECDSASignatureBuffer to handle large chainIds)\n    if (chainId && !Number.isSafeInteger(chainId)) {\n      throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n    }\n\n    const v = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;\n    return {\n      r,\n      s,\n      v\n    };\n  }\n\n  const chainIdBN = types_1.toType(chainId, types_1.TypeOutput.BN);\n  const v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer);\n  return {\n    r,\n    s,\n    v\n  };\n}\n\nexports.ecsign = ecsign;\n\nfunction calculateSigRecovery(v, chainId) {\n  const vBN = types_1.toType(v, types_1.TypeOutput.BN);\n\n  if (!chainId) {\n    return vBN.subn(27);\n  }\n\n  const chainIdBN = types_1.toType(chainId, types_1.TypeOutput.BN);\n  return vBN.sub(chainIdBN.muln(2).addn(35));\n}\n\nfunction isValidSigRecovery(recovery) {\n  const rec = new bn_js_1.default(recovery);\n  return rec.eqn(0) || rec.eqn(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * @returns Recovered public key\n */\n\n\nexports.ecrecover = function (msgHash, v, r, s, chainId) {\n  const signature = Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32)], 64);\n  const recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n\n  const senderPubKey = secp256k1_1.ecdsaRecover(signature, recovery.toNumber(), msgHash);\n  return Buffer.from(secp256k1_1.publicKeyConvert(senderPubKey, false).slice(1));\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * @returns Signature\n */\n\n\nexports.toRpcSig = function (v, r, s, chainId) {\n  const recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  } // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n\n\n  return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n */\n\n\nexports.fromRpcSig = function (sig) {\n  const buf = bytes_1.toBuffer(sig);\n\n  if (buf.length < 65) {\n    throw new Error('Invalid signature length');\n  }\n\n  let v = bytes_1.bufferToInt(buf.slice(64)); // support both versions of `eth_sign` responses\n\n  if (v < 27) {\n    v += 27;\n  }\n\n  return {\n    v: v,\n    r: buf.slice(0, 32),\n    s: buf.slice(32, 64)\n  };\n};\n/**\n * Validate a ECDSA signature.\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\n\n\nexports.isValidSignature = function (v, r, s, homesteadOrLater = true, chainId) {\n  const SECP256K1_N_DIV_2 = new bn_js_1.default('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n  const SECP256K1_N = new bn_js_1.default('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n\n  if (r.length !== 32 || s.length !== 32) {\n    return false;\n  }\n\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false;\n  }\n\n  const rBN = new bn_js_1.default(r);\n  const sBN = new bn_js_1.default(s);\n\n  if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n    return false;\n  }\n\n  if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\n\n\nexports.hashPersonalMessage = function (message) {\n  helpers_1.assertIsBuffer(message);\n  const prefix = Buffer.from(`\\u0019Ethereum Signed Message:\\n${message.length.toString()}`, 'utf-8');\n  return hash_1.keccak(Buffer.concat([prefix, message]));\n};","map":{"version":3,"sources":["../src/signature.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\nconst secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bytes_1 = require(\"./bytes\");\nconst hash_1 = require(\"./hash\");\nconst helpers_1 = require(\"./helpers\");\nconst types_1 = require(\"./types\");\nfunction ecsign(msgHash, privateKey, chainId) {\n    const { signature, recid: recovery } = secp256k1_1.ecdsaSign(msgHash, privateKey);\n    const r = Buffer.from(signature.slice(0, 32));\n    const s = Buffer.from(signature.slice(32, 64));\n    if (!chainId || typeof chainId === 'number') {\n        // return legacy type ECDSASignature (deprecated in favor of ECDSASignatureBuffer to handle large chainIds)\n        if (chainId && !Number.isSafeInteger(chainId)) {\n            throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n        }\n        const v = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;\n        return { r, s, v };\n    }\n    const chainIdBN = types_1.toType(chainId, types_1.TypeOutput.BN);\n    const v = chainIdBN\n        .muln(2)\n        .addn(35)\n        .addn(recovery)\n        .toArrayLike(Buffer);\n    return { r, s, v };\n}\nexports.ecsign = ecsign;\nfunction calculateSigRecovery(v, chainId) {\n    const vBN = types_1.toType(v, types_1.TypeOutput.BN);\n    if (!chainId) {\n        return vBN.subn(27);\n    }\n    const chainIdBN = types_1.toType(chainId, types_1.TypeOutput.BN);\n    return vBN.sub(chainIdBN.muln(2).addn(35));\n}\nfunction isValidSigRecovery(recovery) {\n    const rec = new bn_js_1.default(recovery);\n    return rec.eqn(0) || rec.eqn(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * @returns Recovered public key\n */\nexports.ecrecover = function (msgHash, v, r, s, chainId) {\n    const signature = Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32)], 64);\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    const senderPubKey = secp256k1_1.ecdsaRecover(signature, recovery.toNumber(), msgHash);\n    return Buffer.from(secp256k1_1.publicKeyConvert(senderPubKey, false).slice(1));\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * @returns Signature\n */\nexports.toRpcSig = function (v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n    return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n */\nexports.fromRpcSig = function (sig) {\n    const buf = bytes_1.toBuffer(sig);\n    if (buf.length < 65) {\n        throw new Error('Invalid signature length');\n    }\n    let v = bytes_1.bufferToInt(buf.slice(64));\n    // support both versions of `eth_sign` responses\n    if (v < 27) {\n        v += 27;\n    }\n    return {\n        v: v,\n        r: buf.slice(0, 32),\n        s: buf.slice(32, 64)\n    };\n};\n/**\n * Validate a ECDSA signature.\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nexports.isValidSignature = function (v, r, s, homesteadOrLater = true, chainId) {\n    const SECP256K1_N_DIV_2 = new bn_js_1.default('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n    const SECP256K1_N = new bn_js_1.default('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n    if (r.length !== 32 || s.length !== 32) {\n        return false;\n    }\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n        return false;\n    }\n    const rBN = new bn_js_1.default(r);\n    const sBN = new bn_js_1.default(s);\n    if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n        return false;\n    }\n    if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n        return false;\n    }\n    return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nexports.hashPersonalMessage = function (message) {\n    helpers_1.assertIsBuffer(message);\n    const prefix = Buffer.from(`\\u0019Ethereum Signed Message:\\n${message.length.toString()}`, 'utf-8');\n    return hash_1.keccak(Buffer.concat([prefix, message]));\n};\n//# sourceMappingURL=signature.js.map"]},"metadata":{},"sourceType":"script"}