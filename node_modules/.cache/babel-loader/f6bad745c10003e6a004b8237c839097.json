{"ast":null,"code":"const EventEmitter = require('events');\n\nclass EthereumProvider extends EventEmitter {\n  constructor(connection) {\n    super();\n    this.enable = this.enable.bind(this);\n    this._send = this._send.bind(this);\n    this.send = this.send.bind(this);\n    this._sendBatch = this._sendBatch.bind(this);\n    this.subscribe = this.subscribe.bind(this);\n    this.unsubscribe = this.unsubscribe.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    this.sendAsyncBatch = this.sendAsyncBatch.bind(this);\n    this.isConnected = this.isConnected.bind(this);\n    this.close = this.close.bind(this);\n    this.request = this.request.bind(this);\n    this.connected = false;\n    this.nextId = 0;\n    this.promises = {};\n    this.subscriptions = [];\n    this.connection = connection;\n    this.connection.on('connect', () => this.checkConnection());\n    this.connection.on('close', () => {\n      this.connected = false;\n      this.emit('close');\n      this.emit('disconnect');\n    });\n    this.connection.on('payload', payload => {\n      const {\n        id,\n        method,\n        error,\n        result\n      } = payload;\n\n      if (typeof id !== 'undefined') {\n        if (this.promises[id]) {\n          // Fulfill promise\n          payload.error ? this.promises[id].reject(error) : this.promises[id].resolve(result);\n          delete this.promises[id];\n        }\n      } else if (method && method.indexOf('_subscription') > -1) {\n        // Emit subscription result\n        // Events: connect, disconnect, chainChanged, accountsChanged, message\n        this.emit(payload.params.subscription, payload.params.result);\n        this.emit(method, payload.params); // Older EIP-1193\n\n        this.emit('message', {\n          // Latest EIP-1193\n          type: payload.method,\n          data: {\n            subscription: payload.params.subscription,\n            result: payload.params.result\n          }\n        });\n        this.emit('data', payload); // Backwards Compatibility\n      }\n    });\n    this.on('newListener', (event, listener) => {\n      if (event === 'chainChanged' && !this.attemptedChainSubscription && this.connected) {\n        this.startChainSubscription();\n      } else if (event === 'accountsChanged' && !this.attemptedAccountsSubscription && this.connected) {\n        this.startAccountsSubscription();\n      } else if (event === 'networkChanged' && !this.attemptedNetworkSubscription && this.connected) {\n        this.startNetworkSubscription();\n        console.warn('The networkChanged event is being deprecated, use chainChainged instead');\n      }\n    });\n  }\n\n  async checkConnection() {\n    try {\n      this.emit('connect', await this._send('net_version'));\n      this.connected = true;\n      if (this.listenerCount('networkChanged') && !this.attemptedNetworkSubscription) this.startNetworkSubscription();\n      if (this.listenerCount('chainChanged') && !this.attemptedChainSubscription) this.startNetworkSubscription();\n      if (this.listenerCount('accountsChanged') && !this.attemptedAccountsSubscription) this.startAccountsSubscription();\n    } catch (e) {\n      this.connected = false;\n    }\n  }\n\n  async startNetworkSubscription() {\n    this.attemptedNetworkSubscription = true;\n\n    try {\n      const networkChanged = await this.subscribe('eth_subscribe', 'networkChanged');\n      this.on(networkChanged, netId => this.emit('networkChanged', netId));\n    } catch (e) {\n      console.warn('Unable to subscribe to networkChanged', e);\n    }\n  }\n\n  async startChainSubscription() {\n    this.attemptedChainSubscription = true;\n\n    try {\n      const chainChanged = await this.subscribe('eth_subscribe', 'chainChanged');\n      this.on(chainChanged, netId => this.emit('chainChanged', netId));\n    } catch (e) {\n      console.warn('Unable to subscribe to chainChanged', e);\n    }\n  }\n\n  async startAccountsSubscription() {\n    this.attemptedAccountsSubscription = true;\n\n    try {\n      const accountsChanged = await this.subscribe('eth_subscribe', 'accountsChanged');\n      this.on(accountsChanged, accounts => this.emit('accountsChanged', accounts));\n    } catch (e) {\n      console.warn('Unable to subscribe to accountsChanged', e);\n    }\n  }\n\n  enable() {\n    return new Promise((resolve, reject) => {\n      this._send('eth_accounts').then(accounts => {\n        if (accounts.length > 0) {\n          this.accounts = accounts;\n          this.coinbase = accounts[0];\n          this.emit('enable');\n          resolve(accounts);\n        } else {\n          const err = new Error('User Denied Full Provider');\n          err.code = 4001;\n          reject(err);\n        }\n      }).catch(reject);\n    });\n  }\n\n  _send(method, params = []) {\n    return new Promise((resolve, reject) => {\n      let payload;\n\n      if (typeof method === 'object' && method !== null) {\n        payload = method;\n        payload.params = payload.params || [];\n        payload.jsonrpc = '2.0';\n        payload.id = this.nextId++;\n      } else {\n        payload = {\n          jsonrpc: '2.0',\n          id: this.nextId++,\n          method,\n          params\n        };\n      }\n\n      this.promises[payload.id] = {\n        resolve,\n        reject\n      };\n\n      if (!payload.method || typeof payload.method !== 'string') {\n        this.promises[payload.id].reject(new Error('Method is not a valid string.'));\n        delete this.promises[payload.id];\n      } else if (!(payload.params instanceof Array)) {\n        this.promises[payload.id].reject(new Error('Params is not a valid array.'));\n        delete this.promises[payload.id];\n      } else {\n        this.connection.send(payload);\n      }\n    });\n  }\n\n  send(...args) {\n    // Send can be clobbered, proxy sendPromise for backwards compatibility\n    return this._send(...args);\n  }\n\n  _sendBatch(requests) {\n    return Promise.all(requests.map(payload => this._send(payload.method, payload.params)));\n  }\n\n  subscribe(type, method, params = []) {\n    return this._send(type, [method, ...params]).then(id => {\n      this.subscriptions.push(id);\n      return id;\n    });\n  }\n\n  unsubscribe(type, id) {\n    return this._send(type, [id]).then(success => {\n      if (success) {\n        this.subscriptions = this.subscriptions.filter(_id => _id !== id); // Remove subscription\n\n        this.removeAllListeners(id); // Remove listeners\n\n        return success;\n      }\n    });\n  }\n\n  sendAsync(payload, cb) {\n    // Backwards Compatibility\n    if (!cb || typeof cb !== 'function') return cb(new Error('Invalid or undefined callback provided to sendAsync'));\n    if (!payload) return cb(new Error('Invalid Payload')); // sendAsync can be called with an array for batch requests used by web3.js 0.x\n    // this is not part of EIP-1193's backwards compatibility but we still want to support it\n\n    payload.jsonrpc = '2.0';\n    payload.id = payload.id || this.nextId++;\n\n    if (payload instanceof Array) {\n      return this.sendAsyncBatch(payload, cb);\n    } else {\n      return this._send(payload.method, payload.params).then(result => {\n        cb(null, {\n          id: payload.id,\n          jsonrpc: payload.jsonrpc,\n          result\n        });\n      }).catch(err => {\n        cb(err);\n      });\n    }\n  }\n\n  sendAsyncBatch(payload, cb) {\n    return this._sendBatch(payload).then(results => {\n      const result = results.map((entry, index) => {\n        return {\n          id: payload[index].id,\n          jsonrpc: payload[index].jsonrpc,\n          result: entry\n        };\n      });\n      cb(null, result);\n    }).catch(err => {\n      cb(err);\n    });\n  }\n\n  isConnected() {\n    // Backwards Compatibility\n    return this.connected;\n  }\n\n  close() {\n    if (this.connection && this.connection.close) this.connection.close();\n    this.connected = false;\n    const error = new Error('Provider closed, subscription lost, please subscribe again.');\n    this.subscriptions.forEach(id => this.emit(id, error)); // Send Error objects to any open subscriptions\n\n    this.subscriptions = []; // Clear subscriptions\n  }\n\n  request(payload) {\n    return this._send(payload.method, payload.params);\n  }\n\n}\n\nmodule.exports = EthereumProvider;","map":{"version":3,"sources":["/Users/leondo/Desktop/metamask-auth/node_modules/ethereum-provider/index.js"],"names":["EventEmitter","require","EthereumProvider","constructor","connection","enable","bind","_send","send","_sendBatch","subscribe","unsubscribe","sendAsync","sendAsyncBatch","isConnected","close","request","connected","nextId","promises","subscriptions","on","checkConnection","emit","payload","id","method","error","result","reject","resolve","indexOf","params","subscription","type","data","event","listener","attemptedChainSubscription","startChainSubscription","attemptedAccountsSubscription","startAccountsSubscription","attemptedNetworkSubscription","startNetworkSubscription","console","warn","listenerCount","e","networkChanged","netId","chainChanged","accountsChanged","accounts","Promise","then","length","coinbase","err","Error","code","catch","jsonrpc","Array","args","requests","all","map","push","success","filter","_id","removeAllListeners","cb","results","entry","index","forEach","module","exports"],"mappings":"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","sourcesContent":["const EventEmitter = require('events')\n\nclass EthereumProvider extends EventEmitter {\n  constructor (connection) {\n    super()\n    this.enable = this.enable.bind(this)\n    this._send = this._send.bind(this)\n    this.send = this.send.bind(this)\n    this._sendBatch = this._sendBatch.bind(this)\n    this.subscribe = this.subscribe.bind(this)\n    this.unsubscribe = this.unsubscribe.bind(this)\n    this.sendAsync = this.sendAsync.bind(this)\n    this.sendAsyncBatch = this.sendAsyncBatch.bind(this)\n    this.isConnected = this.isConnected.bind(this)\n    this.close = this.close.bind(this)\n    this.request = this.request.bind(this)\n    this.connected = false\n    this.nextId = 0\n    this.promises = {}\n    this.subscriptions = []\n    this.connection = connection\n    this.connection.on('connect', () => this.checkConnection())\n    this.connection.on('close', () => {\n      this.connected = false\n      this.emit('close')\n      this.emit('disconnect')\n    })\n    this.connection.on('payload', payload => {\n      const { id, method, error, result } = payload\n      if (typeof id !== 'undefined') {\n        if (this.promises[id]) { // Fulfill promise\n          payload.error ? this.promises[id].reject(error) : this.promises[id].resolve(result)\n          delete this.promises[id]\n        }\n      } else if (method && method.indexOf('_subscription') > -1) { // Emit subscription result\n        // Events: connect, disconnect, chainChanged, accountsChanged, message\n        this.emit(payload.params.subscription, payload.params.result)\n        this.emit(method, payload.params) // Older EIP-1193\n        this.emit('message', { // Latest EIP-1193\n          type: payload.method,\n          data: {\n            subscription: payload.params.subscription,\n            result: payload.params.result\n          }\n        })\n        this.emit('data', payload) // Backwards Compatibility\n      }\n    })\n    this.on('newListener', (event, listener) => {\n      if (event === 'chainChanged' && !this.attemptedChainSubscription && this.connected) {\n        this.startChainSubscription()\n      } else if (event === 'accountsChanged' && !this.attemptedAccountsSubscription && this.connected) {\n        this.startAccountsSubscription()\n      } else if (event === 'networkChanged' && !this.attemptedNetworkSubscription && this.connected) {\n        this.startNetworkSubscription()\n        console.warn('The networkChanged event is being deprecated, use chainChainged instead')\n      }\n    })\n  }\n\n  async checkConnection () {\n    try {\n      this.emit('connect', await this._send('net_version'))\n      this.connected = true\n      if (this.listenerCount('networkChanged') && !this.attemptedNetworkSubscription) this.startNetworkSubscription()\n      if (this.listenerCount('chainChanged') && !this.attemptedChainSubscription) this.startNetworkSubscription()\n      if (this.listenerCount('accountsChanged') && !this.attemptedAccountsSubscription) this.startAccountsSubscription()\n    } catch (e) {\n      this.connected = false\n    }\n  }\n\n  async startNetworkSubscription () {\n    this.attemptedNetworkSubscription = true\n    try {\n      const networkChanged = await this.subscribe('eth_subscribe', 'networkChanged')\n      this.on(networkChanged, netId => this.emit('networkChanged', netId))\n    } catch (e) {\n      console.warn('Unable to subscribe to networkChanged', e)\n    }\n  }\n\n  async startChainSubscription () {\n    this.attemptedChainSubscription = true\n    try {\n      const chainChanged = await this.subscribe('eth_subscribe', 'chainChanged')\n      this.on(chainChanged, netId => this.emit('chainChanged', netId))\n    } catch (e) {\n      console.warn('Unable to subscribe to chainChanged', e)\n    }\n  }\n\n  async startAccountsSubscription () {\n    this.attemptedAccountsSubscription = true\n    try {\n      const accountsChanged = await this.subscribe('eth_subscribe', 'accountsChanged')\n      this.on(accountsChanged, accounts => this.emit('accountsChanged', accounts))\n    } catch (e) {\n      console.warn('Unable to subscribe to accountsChanged', e)\n    }\n  }\n\n  enable () {\n    return new Promise((resolve, reject) => {\n      this._send('eth_accounts').then(accounts => {\n        if (accounts.length > 0) {\n          this.accounts = accounts\n          this.coinbase = accounts[0]\n          this.emit('enable')\n          resolve(accounts)\n        } else {\n          const err = new Error('User Denied Full Provider')\n          err.code = 4001\n          reject(err)\n        }\n      }).catch(reject)\n    })\n  }\n\n  _send (method, params = []) {\n    return new Promise((resolve, reject) => {\n      let payload\n      if (typeof method === 'object' && method !== null) {\n        payload = method\n        payload.params = payload.params || []\n        payload.jsonrpc = '2.0'\n        payload.id = this.nextId++\n      } else {\n        payload = { jsonrpc: '2.0', id: this.nextId++, method, params }\n      }\n      this.promises[payload.id] = { resolve, reject }\n      if (!payload.method || typeof payload.method !== 'string') {\n        this.promises[payload.id].reject(new Error('Method is not a valid string.'))\n        delete this.promises[payload.id]\n      } else if (!(payload.params instanceof Array)) {\n        this.promises[payload.id].reject(new Error('Params is not a valid array.'))\n        delete this.promises[payload.id]\n      } else {\n        this.connection.send(payload)\n      }\n    })\n  }\n\n  send (...args) { // Send can be clobbered, proxy sendPromise for backwards compatibility\n    return this._send(...args)\n  }\n\n  _sendBatch (requests) {\n    return Promise.all(requests.map(payload => this._send(payload.method, payload.params)))\n  }\n\n  subscribe (type, method, params = []) {\n    return this._send(type, [method, ...params]).then(id => {\n      this.subscriptions.push(id)\n      return id\n    })\n  }\n\n  unsubscribe (type, id) {\n    return this._send(type, [id]).then(success => {\n      if (success) {\n        this.subscriptions = this.subscriptions.filter(_id => _id !== id) // Remove subscription\n        this.removeAllListeners(id) // Remove listeners\n        return success\n      }\n    })\n  }\n\n  sendAsync (payload, cb) { // Backwards Compatibility\n    if (!cb || typeof cb !== 'function') return cb(new Error('Invalid or undefined callback provided to sendAsync'))\n    if (!payload) return cb(new Error('Invalid Payload'))\n    // sendAsync can be called with an array for batch requests used by web3.js 0.x\n    // this is not part of EIP-1193's backwards compatibility but we still want to support it\n    payload.jsonrpc = '2.0'\n    payload.id = payload.id || this.nextId++\n    if (payload instanceof Array) {\n      return this.sendAsyncBatch(payload, cb)\n    } else {\n      return this._send(payload.method, payload.params).then(result => {\n        cb(null, { id: payload.id, jsonrpc: payload.jsonrpc, result })\n      }).catch(err => {\n        cb(err)\n      })\n    }\n  }\n\n  sendAsyncBatch (payload, cb) {\n    return this._sendBatch(payload).then((results) => {\n      const result = results.map((entry, index) => {\n        return { id: payload[index].id, jsonrpc: payload[index].jsonrpc, result: entry }\n      })\n      cb(null, result)\n    }).catch(err => {\n      cb(err)\n    })\n  }\n\n  isConnected () { // Backwards Compatibility\n    return this.connected\n  }\n\n  close () {\n    if (this.connection && this.connection.close) this.connection.close()\n    this.connected = false\n    const error = new Error('Provider closed, subscription lost, please subscribe again.')\n    this.subscriptions.forEach(id => this.emit(id, error)) // Send Error objects to any open subscriptions\n    this.subscriptions = [] // Clear subscriptions\n  }\n\n  request (payload) {\n    return this._send(payload.method, payload.params)\n  }\n}\n\nmodule.exports = EthereumProvider\n"]},"metadata":{},"sourceType":"script"}