{"ast":null,"code":"import { p2 } from '../utilities';\nimport read from './read';\n/**\n * Converts a section of a buffer to an unsigned integer.\n *\n * @example\n * // buffer 11110110\n * readUInt(buffer, 3, 5) => 22\n *\n * @param {Buffer} buffer the buffer to extract information from\n * @param {Number} length the length of the unsigned integer (in bits)\n * @param {Number} offset where to start (in bits)\n * @returns {Number}\n */\n\nexport default (function (buffer, offset, length) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n\n  if (length === void 0) {\n    length = 8;\n  }\n\n  var arr = read(buffer, offset, length);\n  var result = 0;\n\n  for (var i = 0; i < length; i++) result += arr[i] * p2[length - i - 1];\n\n  return result;\n});","map":{"version":3,"sources":["/Users/leondo/Desktop/metamask-auth/node_modules/bitwise/esm/buffer/read-u-int.js"],"names":["p2","read","buffer","offset","length","arr","result","i"],"mappings":"AAAA,SAASA,EAAT,QAAmB,cAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,gBAAgB,UAAUC,MAAV,EAAkBC,MAAlB,EAA0BC,MAA1B,EAAkC;AAC9C,MAAID,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,IAAAA,MAAM,GAAG,CAAT;AAAa;;AACtC,MAAIC,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,IAAAA,MAAM,GAAG,CAAT;AAAa;;AACtC,MAAIC,GAAG,GAAGJ,IAAI,CAACC,MAAD,EAASC,MAAT,EAAiBC,MAAjB,CAAd;AACA,MAAIE,MAAM,GAAG,CAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAApB,EAA4BG,CAAC,EAA7B,EACID,MAAM,IAAID,GAAG,CAACE,CAAD,CAAH,GAASP,EAAE,CAACI,MAAM,GAAGG,CAAT,GAAa,CAAd,CAArB;;AACJ,SAAOD,MAAP;AACH,CARD","sourcesContent":["import { p2 } from '../utilities';\nimport read from './read';\n/**\n * Converts a section of a buffer to an unsigned integer.\n *\n * @example\n * // buffer 11110110\n * readUInt(buffer, 3, 5) => 22\n *\n * @param {Buffer} buffer the buffer to extract information from\n * @param {Number} length the length of the unsigned integer (in bits)\n * @param {Number} offset where to start (in bits)\n * @returns {Number}\n */\nexport default (function (buffer, offset, length) {\n    if (offset === void 0) { offset = 0; }\n    if (length === void 0) { length = 8; }\n    var arr = read(buffer, offset, length);\n    var result = 0;\n    for (var i = 0; i < length; i++)\n        result += arr[i] * p2[length - i - 1];\n    return result;\n});\n"]},"metadata":{},"sourceType":"module"}