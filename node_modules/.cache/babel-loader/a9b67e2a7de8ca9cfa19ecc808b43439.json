{"ast":null,"code":"import { p2 } from '../utilities';\nimport not from '../bits/not';\nimport read from './read';\n/**\n * Converts a section of a buffer to a signed integer.\n *\n * @example\n * // buffer 11110110\n * readUInt(buffer, 3, 5) => -10\n *\n * @param {Buffer} buffer the buffer to extract information from\n * @param {Number} length the length of the signed integer (in bits)\n * @param {Number} offset where to start (in bits)\n * @return {Number}\n */\n\nexport default (function (buffer, offset, length) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n\n  if (length === void 0) {\n    length = 8;\n  }\n\n  var bits = read(buffer, offset, length);\n\n  if (bits[0] === 0) {\n    var result = 0;\n\n    for (var i = 0; i < length; i++) if (bits[i]) result += p2[length - i - 1];\n\n    return result;\n  } else {\n    var result = -1;\n    var inverted = not(bits);\n\n    for (var i = 0; i < length; i++) if (inverted[i]) result -= p2[length - i - 1];\n\n    return result;\n  }\n});","map":{"version":3,"sources":["/Users/leondo/Desktop/metamask-auth/node_modules/bitwise/esm/buffer/read-int.js"],"names":["p2","not","read","buffer","offset","length","bits","result","i","inverted"],"mappings":"AAAA,SAASA,EAAT,QAAmB,cAAnB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,gBAAgB,UAAUC,MAAV,EAAkBC,MAAlB,EAA0BC,MAA1B,EAAkC;AAC9C,MAAID,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,IAAAA,MAAM,GAAG,CAAT;AAAa;;AACtC,MAAIC,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,IAAAA,MAAM,GAAG,CAAT;AAAa;;AACtC,MAAIC,IAAI,GAAGJ,IAAI,CAACC,MAAD,EAASC,MAAT,EAAiBC,MAAjB,CAAf;;AACA,MAAIC,IAAI,CAAC,CAAD,CAAJ,KAAY,CAAhB,EAAmB;AACf,QAAIC,MAAM,GAAG,CAAb;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAApB,EAA4BG,CAAC,EAA7B,EACI,IAAIF,IAAI,CAACE,CAAD,CAAR,EACID,MAAM,IAAIP,EAAE,CAACK,MAAM,GAAGG,CAAT,GAAa,CAAd,CAAZ;;AACR,WAAOD,MAAP;AACH,GAND,MAOK;AACD,QAAIA,MAAM,GAAG,CAAC,CAAd;AACA,QAAIE,QAAQ,GAAGR,GAAG,CAACK,IAAD,CAAlB;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAApB,EAA4BG,CAAC,EAA7B,EACI,IAAIC,QAAQ,CAACD,CAAD,CAAZ,EACID,MAAM,IAAIP,EAAE,CAACK,MAAM,GAAGG,CAAT,GAAa,CAAd,CAAZ;;AACR,WAAOD,MAAP;AACH;AACJ,CAnBD","sourcesContent":["import { p2 } from '../utilities';\nimport not from '../bits/not';\nimport read from './read';\n/**\n * Converts a section of a buffer to a signed integer.\n *\n * @example\n * // buffer 11110110\n * readUInt(buffer, 3, 5) => -10\n *\n * @param {Buffer} buffer the buffer to extract information from\n * @param {Number} length the length of the signed integer (in bits)\n * @param {Number} offset where to start (in bits)\n * @return {Number}\n */\nexport default (function (buffer, offset, length) {\n    if (offset === void 0) { offset = 0; }\n    if (length === void 0) { length = 8; }\n    var bits = read(buffer, offset, length);\n    if (bits[0] === 0) {\n        var result = 0;\n        for (var i = 0; i < length; i++)\n            if (bits[i])\n                result += p2[length - i - 1];\n        return result;\n    }\n    else {\n        var result = -1;\n        var inverted = not(bits);\n        for (var i = 0; i < length; i++)\n            if (inverted[i])\n                result -= p2[length - i - 1];\n        return result;\n    }\n});\n"]},"metadata":{},"sourceType":"module"}