{"ast":null,"code":"/**\n * Sets the value of a specific bit.\n * @example bitwise.integer.set(128, 7, 0) => 0\n * @param {Integer} int32 input number\n * @param {Integer} position bit’s position\n * @param {Integer} value bit’s new value\n * @returns {Integer} resulting number\n */\nexport default (function (int32, position, value) {\n  return value === 1 ? int32 | 1 << position : int32 & ~(1 << position);\n});","map":{"version":3,"sources":["/Users/leondo/Desktop/metamask-auth/node_modules/bitwise/esm/integer/set-bit.js"],"names":["int32","position","value"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAUA,KAAV,EAAiBC,QAAjB,EAA2BC,KAA3B,EAAkC;AAC9C,SAAQA,KAAK,KAAK,CAAV,GAAcF,KAAK,GAAI,KAAKC,QAA5B,GAAwCD,KAAK,GAAG,EAAE,KAAKC,QAAP,CAAxD;AACH,CAFD","sourcesContent":["/**\n * Sets the value of a specific bit.\n * @example bitwise.integer.set(128, 7, 0) => 0\n * @param {Integer} int32 input number\n * @param {Integer} position bit’s position\n * @param {Integer} value bit’s new value\n * @returns {Integer} resulting number\n */\nexport default (function (int32, position, value) {\n    return (value === 1 ? int32 | (1 << position) : int32 & ~(1 << position));\n});\n"]},"metadata":{},"sourceType":"module"}