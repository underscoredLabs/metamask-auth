{"ast":null,"code":"import HDKey from 'hdkey';\nimport * as ethUtil from 'ethereumjs-util';\nimport { Buffer } from 'buffer';\nvar publicToAddress = ethUtil.publicToAddress,\n    toChecksumAddress = ethUtil.toChecksumAddress;\nvar numberToGet = 5;\n\nfunction generateAddresses(account, offset) {\n  var publicKey = account.publicKey,\n      chainCode = account.chainCode,\n      path = account.path;\n  var hdk = new HDKey();\n  hdk.publicKey = new Buffer(publicKey, 'hex');\n  hdk.chainCode = new Buffer(chainCode, 'hex');\n  var addresses = [];\n\n  for (var i = offset; i < numberToGet + offset; i++) {\n    var dkey = hdk.deriveChild(i);\n    var address = publicToAddress(dkey.publicKey, true).toString('hex');\n    addresses.push({\n      dPath: \"\".concat(path, \"/\").concat(i),\n      address: toChecksumAddress(\"0x\".concat(address))\n    });\n  }\n\n  return addresses;\n}\n\nfunction isValidPath(path) {\n  var parts = path.split('/');\n\n  if (parts[0] !== 'm') {\n    return false;\n  }\n\n  if (parts[1] !== \"44'\") {\n    return false;\n  }\n\n  if (parts[2] !== \"60'\" && parts[2] !== \"1'\") {\n    return false;\n  }\n\n  if (parts[3] === undefined) {\n    return true;\n  }\n\n  var accountFieldDigit = Number(parts[3][0]);\n\n  if (isNaN(accountFieldDigit) || accountFieldDigit < 0 || parts[3][1] !== \"'\") {\n    return false;\n  }\n\n  if (parts[4] === undefined) {\n    return true;\n  }\n\n  var changeFieldDigit = Number(parts[4][0]);\n\n  if (isNaN(changeFieldDigit) || changeFieldDigit < 0) {\n    return false;\n  }\n\n  if (parts[5] === undefined) {\n    return true;\n  }\n\n  var addressFieldDigit = Number(parts[5][0]);\n\n  if (isNaN(addressFieldDigit) || addressFieldDigit < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport { generateAddresses, isValidPath };","map":{"version":3,"sources":["/Users/leondo/Desktop/metamask-auth/node_modules/bnc-onboard/dist/esm/hd-wallet-642b97e3.js"],"names":["HDKey","ethUtil","Buffer","publicToAddress","toChecksumAddress","numberToGet","generateAddresses","account","offset","publicKey","chainCode","path","hdk","addresses","i","dkey","deriveChild","address","toString","push","dPath","concat","isValidPath","parts","split","undefined","accountFieldDigit","Number","isNaN","changeFieldDigit","addressFieldDigit"],"mappings":"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","sourcesContent":["import HDKey from 'hdkey';\nimport * as ethUtil from 'ethereumjs-util';\nimport { Buffer } from 'buffer';\nvar publicToAddress = ethUtil.publicToAddress,\n    toChecksumAddress = ethUtil.toChecksumAddress;\nvar numberToGet = 5;\n\nfunction generateAddresses(account, offset) {\n  var publicKey = account.publicKey,\n      chainCode = account.chainCode,\n      path = account.path;\n  var hdk = new HDKey();\n  hdk.publicKey = new Buffer(publicKey, 'hex');\n  hdk.chainCode = new Buffer(chainCode, 'hex');\n  var addresses = [];\n\n  for (var i = offset; i < numberToGet + offset; i++) {\n    var dkey = hdk.deriveChild(i);\n    var address = publicToAddress(dkey.publicKey, true).toString('hex');\n    addresses.push({\n      dPath: \"\".concat(path, \"/\").concat(i),\n      address: toChecksumAddress(\"0x\".concat(address))\n    });\n  }\n\n  return addresses;\n}\n\nfunction isValidPath(path) {\n  var parts = path.split('/');\n\n  if (parts[0] !== 'm') {\n    return false;\n  }\n\n  if (parts[1] !== \"44'\") {\n    return false;\n  }\n\n  if (parts[2] !== \"60'\" && parts[2] !== \"1'\") {\n    return false;\n  }\n\n  if (parts[3] === undefined) {\n    return true;\n  }\n\n  var accountFieldDigit = Number(parts[3][0]);\n\n  if (isNaN(accountFieldDigit) || accountFieldDigit < 0 || parts[3][1] !== \"'\") {\n    return false;\n  }\n\n  if (parts[4] === undefined) {\n    return true;\n  }\n\n  var changeFieldDigit = Number(parts[4][0]);\n\n  if (isNaN(changeFieldDigit) || changeFieldDigit < 0) {\n    return false;\n  }\n\n  if (parts[5] === undefined) {\n    return true;\n  }\n\n  var addressFieldDigit = Number(parts[5][0]);\n\n  if (isNaN(addressFieldDigit) || addressFieldDigit < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport { generateAddresses, isValidPath };"]},"metadata":{},"sourceType":"module"}