{"ast":null,"code":"import writeByte from '../byte/write';\n/**\n * Creates a new buffer and writes the given bits.\n *\n * @example\n * createBuffer([1,1,1,1, 0,0,0,1, 1,0,1,0]) => buffer with data 1111 0001 1010 0000\n *\n * @param {Array} bits an array containing the bits to insert\n * @returns {Buffer}\n */\n\nexport default (function (bits) {\n  var data = [0, 0, 0, 0, 0, 0, 0, 0];\n  var buffer = Buffer.alloc(Math.ceil(bits.length / 8));\n\n  for (var i = 0; i < buffer.length; i++) {\n    for (var j = 0; j < 8; j++) {\n      if (bits[i * 8 + j]) data[j] = bits[i * 8 + j];else data[j] = 0;\n    }\n\n    buffer[i] = writeByte(data);\n  }\n\n  return buffer;\n});","map":{"version":3,"sources":["/Users/leondo/Desktop/metamask-auth/node_modules/bitwise/esm/buffer/create.js"],"names":["writeByte","bits","data","buffer","Buffer","alloc","Math","ceil","length","i","j"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,eAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,gBAAgB,UAAUC,IAAV,EAAgB;AAC5B,MAAIC,IAAI,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAX;AACA,MAAIC,MAAM,GAAGC,MAAM,CAACC,KAAP,CAAaC,IAAI,CAACC,IAAL,CAAUN,IAAI,CAACO,MAAL,GAAc,CAAxB,CAAb,CAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACK,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACpC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,UAAIT,IAAI,CAACQ,CAAC,GAAG,CAAJ,GAAQC,CAAT,CAAR,EACIR,IAAI,CAACQ,CAAD,CAAJ,GAAUT,IAAI,CAACQ,CAAC,GAAG,CAAJ,GAAQC,CAAT,CAAd,CADJ,KAGIR,IAAI,CAACQ,CAAD,CAAJ,GAAU,CAAV;AACP;;AACDP,IAAAA,MAAM,CAACM,CAAD,CAAN,GAAYT,SAAS,CAACE,IAAD,CAArB;AACH;;AACD,SAAOC,MAAP;AACH,CAbD","sourcesContent":["import writeByte from '../byte/write';\n/**\n * Creates a new buffer and writes the given bits.\n *\n * @example\n * createBuffer([1,1,1,1, 0,0,0,1, 1,0,1,0]) => buffer with data 1111 0001 1010 0000\n *\n * @param {Array} bits an array containing the bits to insert\n * @returns {Buffer}\n */\nexport default (function (bits) {\n    var data = [0, 0, 0, 0, 0, 0, 0, 0];\n    var buffer = Buffer.alloc(Math.ceil(bits.length / 8));\n    for (var i = 0; i < buffer.length; i++) {\n        for (var j = 0; j < 8; j++) {\n            if (bits[i * 8 + j])\n                data[j] = bits[i * 8 + j];\n            else\n                data[j] = 0;\n        }\n        buffer[i] = writeByte(data);\n    }\n    return buffer;\n});\n"]},"metadata":{},"sourceType":"module"}